SHarePointklklklffkleklkelrklekrlekrlke

https://5jd7y6.sharepoint.com/sites/SPFX3/Library1

muhammad.hamza@5jd7y6.onmicrosoft.com
ZLO!qprPEmZk6AwN

https://graph.microsoft.com/v1.0/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:/react.png



sites
subsites


list -->store content
library--> attachments
lookup --> dropdown (for relationships)

when we create new folder, it makes a drive

when we add new things , all apis are create automatically

to communicate with apis, we use graph api





<?php

use Saloon\Http\Auth\AccessTokenAuthenticator;
use TagMyDoc\SharePoint\SharePointClient;
use function Symfony\Component\Translation\t;

require _DIR_ . '/../vendor/autoload.php';

function get_token(): false|string|null
{
    return @file_get_contents(_DIR_ . '/../storage/token') ?: null;
}
function store_token(string $token): void
{
    file_put_contents(_DIR_ . '/../storage/token', $token);
}

$client = new SharePointClient  ('a1b259ca-22bc-4d80-99f5-a32b6a3cc40c', '7bn8Q~VOIR5eTr.3_YrTZdBFUKbUSV9h~H13Xb77','1a17fb93-b9e8-433d-9418-56455ea5573a');
// technupur
// $client = new SharePointClient('682fb38b-0315-46ef-b0de-e627c9f7dc80', '--_8Q~tRbj-FndfdOmsFSXoLPtkkq9GN7NZeHawe','cfd08a2e-4e1b-46c7-ac26-fb947caf2345');

$token = get_token();

if ($token === null) {
    $token = $client->getAccessToken()->serialize();
    store_token($token);
}

$auth = AccessTokenAuthenticator::unserialize($token);
$client->authenticate($auth);
// echo $token;




$response = $client
    ->drive('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')
    ->downloadItemByPath('react.png');
    // echo ($response);
    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment; filename="react.png"');
    header('Content-Length: ' . strlen($response));
    echo $response;

    // $flag = @mkdir($save_path . "/src/LocalDrive/" . $response,0777,true);
    // echo $flag ;
// var_dump($response->json());

// $response = $client
//     ->drive('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')
//     ->getItemById('01FJOJ76HYJQJSVE3L25CYF22TD2SGR7YB');

// var_dump($response->json());


// $response = $client
//     ->drive('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')
//     ->downloadItemByPath('react.png');

// var_dump($response->json());


// $sites = $client->sites()->get();

// // Loop through sites and find the one you want
// foreach ($sites as $site) {
//     if ($site['name'] === 'YourSiteName') {
//         $driveId = $site['drive']['id'];
//         break;
//     }
// }




$save_path = '/path/to/your/directory'; // Replace this with the actual path you want to use

// Check if the directory exists, and if not, create it
if (!is_dir($save_path)) {
    if (!mkdir($save_path, 0777, true)) {
        die('Failed to create directory: ' . $save_path);
    }
}

$response = 'some_value'; // Replace this with the actual value you want to use

// Create the directory within $save_path
$flag = @mkdir($save_path . "/src/LocalDrive/" . $response, 0777, true);

if (!$flag) {
    die('Failed to create directory: ' . $save_path . "/src/LocalDrive/" . $response);
}


function createFolder($client, $driveId, $itemPath, $localDirectory) {
    // Create the folder on SharePoint
    $response = $client->drive($driveId)->createFolder($itemPath);

    // Check if the SharePoint folder was created successfully
    if ($response) {
        echo "SharePoint Folder Created Successfully!\n";
        
        // Create the folder locally
        $localFolder = $localDirectory . '/' . $response['name'];
        
        if (mkdir($localFolder)) {
            echo "Local Folder Created Successfully at $localFolder\n";
        } else {
            echo "Failed to create Local Folder\n";
        }
    } else {
        echo "Failed to create SharePoint Folder\n";
    }
}



$localDirectory = __DIR__ . '/../src/LocalDrive'; // Adjust the path as needed
createFolder($client, $driveId, $itemPath, $localDirectory);



function downloadFolder($client, $driveId, $folderPath, $localDirectory) {
    // List the contents of the folder
    $folderContents = $client->drive($driveId)->listChildren($folderPath);

    if (!empty($folderContents)) {
        // Create the local folder to store the downloaded files
        $localFolderPath = $localDirectory . DIRECTORY_SEPARATOR . basename($folderPath);
        if (!is_dir($localFolderPath)) {
            mkdir($localFolderPath, 0755, true);
        }

        foreach ($folderContents as $item) {
            if ($item['folder'] && $item['name'] != '.' && $item['name'] != '..') {
                // If it's a folder, recursively download it
                downloadFolder($client, $driveId, $item['id'], $localFolderPath);
            } elseif ($item['file']) {
                // If it's a file, download it
                $localFilePath = $localFolderPath . DIRECTORY_SEPARATOR . $item['name'];
                $fileContent = $client->drive($driveId)->getItemContent($item['id']);
                file_put_contents($localFilePath, $fileContent);
                echo "Downloaded file: $localFilePath\n";
            }
        }
        echo "Downloaded folder: $localFolderPath\n";
    } else {
        echo "Folder is empty or does not exist: $folderPath\n";
    }
}


function downloadFolderByPath($client, $driveId, $folderName) {
    // Define the local directory where you want to save the files
    $localDirectory = __DIR__ . '/../src/LocalDrive';

    // Get the list of files in the folder
    $files = $client
        ->drive($driveId)
        ->getFolderByServerRelativeUrl('/' . $folderName . '/')
        ->files;

    foreach ($files as $file) {
        // Define the local file path
        $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $file->name;

        // Download the file
        $fileContent = Office365\PHP\Client\SharePoint\File::openBinary($client, $file->serverRelativeUrl);
        file_put_contents($localFilePath, $fileContent);

        if (file_put_contents($localFilePath, $fileContent) !== false) {
            echo 'File ' . $file->name . ' saved successfully to ' . $localFilePath . PHP_EOL;
        } else {
            echo 'Failed to save the file ' . $file->name . PHP_EOL;
        }
    }
}






01FJOJ76EN4S24XQ6VUJAIJDDYA7ZLDMZC

CBB5E48D-D5C3-40A2-848C-7807F2B1B322



TestingFileUpload.txt


123-
127

01FJOJ76BTOMOG4S5TQZAKIWQF2YYY5CYC

cTag":"\"c:{6E1C7333-B34B-4086-A45A-05D6318E8B02}

01FJOJ76DBKELGSSQSXRG3KPM5CZLNBX5K

cTag":"\"c:{69165161-124A-4DBC-B53D-9D1656D0DFAA



NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzE5MzU4ODc5MDcwMDAwOzIwNzYzMjQ1MzslMjM7JTIzOyUyMzA7JTIz


01FJOJ76A2TUDVG2UK2JEY25PEFIDDUQGE


// function downloadFolderByPath($client, $driveId, $itemname) {
//     $response = $client
//     ->drive($driveId)
//     ->downloadItemByPath($itemname);   

//    //// Define the local directory where you want to save the image
//        $localDirectory = __DIR__ . '/../src/LocalDrive';

//        $data = json_decode($response, true);
//        $itemname = $data['name'];


//        $localFolder = $localDirectory . '/' . $itemname;

//        $imageContent = $response;
//        //$localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;
//        file_put_contents($localFolder, $imageContent);

//        if (file_put_contents($localFolder, $imageContent) !== false) {
//                    echo 'Image saved successfully to ' . $localFolder;
//                 } else {
//                    echo 'Failed to save the image.';
//                 }
//                }




function getItemById($client, $driveId, $itemId)
{
    try {
        $response = $client->drive($driveId)->getItemById($itemId);
        // If the operation was successful, display a success message
        echo "Item retrieved successfully: " . $response;
    } catch (Exception $e) {
        // If there was an error, display an error message
        echo "Error: " . $e->getMessage();
    }
}


//$itemId ='DDD8DF03-889A-42C8-912E-AD79065AB488';
 // Extract the cTag value
        //$cTag = $data['cTag'];
        //$cTag = substr($data['cTag'], 4, 36); // Extract from position 3 to 38

// function getItemById($client, $driveId, $itemId)
// {
//     $response = $client->drive($driveId)->getItemById($itemId);




 // function createFolder($client, $driveId, $itemPath) {

    //     $response = $client->drive($driveId)->createFolder($itemPath);

    //     echo $response;

    //     //$data = json_decode($response, true);
    //     //$itemname = $data['name'];
    //     //downloadItemByPath($client, $driveId, $itemname);
    // }
//     echo $response;

// }





 $filename = $_FILES['file']['name'];

    $headers = array(
        "Authorization: Bearer " . $token, 
        "Host: graph.microsoft.com",
        "Content-Type: application/json",
        "Content-Length: 0",
    );

    $postfile = curl_init('https://graph.microsoft.com/v1.0/' . $userid . '/drive/root:/{folder}/' . $filename . ':/content'); 
    curl_setopt($postfile, CURLOPT_CUSTOMREQUEST, 'PUT');
    curl_setopt($postfile, CURLOPT_HTTPHEADER, $headers); 
    curl_setopt($postfile, CURLOPT_FOLLOWLOCATION, 1); 
    $result = curl_exec($postfile); 
    curl_close($postfile); 




// Use regular expressions to extract id and name values
preg_match_all('/"id":"([^"]+)","name":"([^"]+)"/', $response, $matches);

// $matches[1] will contain an array of id values
// $matches[2] will contain an array of name values

$itemid = "";
$itemname = "";
// Print the id and name values
for ($i = 0; $i < count($matches[1]); $i++) {
    $itemid = $matches[1][$i];
    $itemname = $matches[2][$i];
     echo $itemid;
     echo $itemname;
     




id":"01FJOJ76DTJUMD7BW5URB32RQF3H3AFKFQ","lastModifiedDateTime":"2023-10-03T07:44:28Z","name":"Function_Testing19",






function downloadItemById($client, $driveId, $itemname, $itemId)
    {
        $response = $client
            ->drive($driveId)
            ->downloadItemById($itemId);

        //Define the local directory where you want to save the Item
        $localDirectory = __DIR__ . '/../src/LocalDrive';

        $imageContent = $response;
        $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;
        file_put_contents($localFilePath, $imageContent);

        if (file_put_contents($localFilePath, $imageContent) !== false) {
            echo 'Item saved successfully to ' . $localFilePath;
        } else {
            echo 'Failed to save the Item.';
        }
    }







function downloadItemById($client, $driveId, $itemname, $itemId)
{
    // Define the local directory where you want to save the item
    $localDirectory = __DIR__ . '/../src/LocalDrive';

    // Define the local file/folder path
    $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;

    // Check if the item (file or folder) already exists locally
    if (file_exists($localFilePath)) {
        echo "Item already exists at: $localFilePath\n";
    } else {
        // Get information about the item
        $itemInfo = $client->drive($driveId)->getItemById($itemId);

        if ($itemInfo !== false) {
            if ($itemInfo['folder']) {
                // If the item is a folder, create the local folder
                if (mkdir($localFilePath, 0777, true)) {
                    echo "Folder created successfully at: $localFilePath\n";
                } else {
                    echo "Failed to create folder at: $localFilePath\n";
                }

                // Recursively download the contents of the folder
                $children = $client->drive($driveId)->getChildrenOfItemById($itemId);
                foreach ($children as $child) {
                    downloadItemById($client, $driveId, $child['name'], $child['id']);
                }
            } else {
                // If the item is a file, download and save it
                $response = $client->drive($driveId)->downloadItemById($itemId);

                if ($response !== false) {
                    if (file_put_contents($localFilePath, $response) !== false) {
                        echo "File saved successfully to $localFilePath\n";
                    } else {
                        echo "Failed to save the file to $localFilePath\n";
                    }
                } else {
                    echo "Failed to download the file.\n";
                }
            }
        } else {
            echo "Failed to get item information.\n";
        }
    }
}



this function moves files on sharepoint , write a function which moves files on local directory


function moveFileLocally($sourcePath, $destinationPath)
{
    try {
        // Use the rename function to move the file
        if (rename($sourcePath, $destinationPath)) {
            echo "File moved successfully.\n";
        } else {
            echo "Failed to move file.\n";
        }
    } catch (Exception $e) {
        // If there was an error, display an error message
        echo "Error moving file: " . $e->getMessage();
    }
}

// Example usage:
$sourcePath = "path/to/source/file"; // Replace with the actual source file path
$destinationPath = "path/to/destination/file"; // Replace with the actual destination file path

moveFileLocally($sourcePath, $destinationPath);







//$childLocalDirectory = $localDirectory . $parentId;
                        //echo $childLocalDirectory;
                        //$localDirectory . DIRECTORY_SEPARATOR . $itemname;
                        //$response = $client->drive($driveId)->moveItem($child['id'], $parentId);
                        //moveFileLocally($localDirectory, $childLocalDirectory);



 // $data = json_decode($response, true);
                    // $nameitem=$data['name'];
                    // echo $response;

// if (isset($data['value']) && is_array($data['value'])) {
                //     $item = $data['value'];

// $item = " ";
                


//$itemIdnew='"$itemId"';
        //$newPhrase = str_replace('"', '', $itemId);
        //echo $itemIdnew;

//echo $children;


01FJOJ76AZIKSEC2YN65C2X2VSN5IOOD2E

deleteItemByPath



id":"01FJOJ76ECJZPEAVOSO5GZNDRW3JRMLNQK","lastModifiedDateTime":"2023-10-04T13:38:40Z","name":"aaaa","


,"id":"01FJOJ76DYK3FX3MOWBBHZBTTXI7C7GLAX","lastModifiedDateTime":"2023-10-03T08:23:03Z","name":"Function_Testing27"



how to delete local directory using php





function deleteItem($client, $driveId, $itemId, $localDirectory)
{
    // Delete the item on SharePoint
    $response = $client->drive($driveId)->deleteItemByPath($itemId);
    
    // Check if the SharePoint item was deleted successfully
    if ($response) {
        echo "SharePoint Item Deleted Successfully!\n";

        // Construct the local item path based on the item's name
        $itemName = basename($itemId);
        $localItemPath = $localDirectory . '/' . $itemName;

        // Check if the local item exists and delete it
        if (file_exists($localItemPath)) {
            if (is_dir($localItemPath)) {
                // Delete the directory and its contents recursively
                $success = deleteDirectory($localItemPath);
                if ($success) {
                    echo "Local Directory Deleted Successfully at $localItemPath\n";
                } else {
                    echo "Failed to delete Local Directory at $localItemPath\n";
                }
            } else {
                // Delete a file
                if (unlink($localItemPath)) {
                    echo "Local File Deleted Successfully at $localItemPath\n";
                } else {
                    echo "Failed to delete Local File at $localItemPath\n";
                }
            }
        } else {
            echo "Local Item does not exist at $localItemPath\n";
        }
    } else {
        echo "Failed to delete SharePoint Item\n";
    }
}

// Recursive function to delete a directory and its contents
function deleteDirectory($dir)
{
    if (!file_exists($dir)) {
        return true;
    }

    if (!is_dir($dir)) {
        return unlink($dir);
    }

    foreach (scandir($dir) as $item) {
        if ($item == '.' || $item == '..') {
            continue;
        }

        if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {
            return false;
        }
    }

    return rmdir($dir);
}




  // function copyItem($client, $driveId, $itemId, $parentId, $localDirectory)
    // {
    //     try {
    //         // Copy the item to SharePoint
    //         $response = $client->drive($driveId)->copyItem($itemId, $parentId);
        
    //         // If the operation was successful in SharePoint, continue to save locally
    //         if ($response) {
    //             // Get the item content
    //             $itemContent = $client->drive($driveId)->getItemById($itemId);

    //             $data = json_decode($response, true);
    //             $name=$data['name'];

    //             // Save the item to the local directory
    //             $localFilePath = $localDirectory . '/' . $name; // You may need to adjust the file name as needed
    //             file_put_contents($localFilePath, $itemContent);
    
    //             // Display a success message
    //             echo "Item Copied successfully to SharePoint and saved locally: " . $localFilePath;
    //         } else {
    //             echo "Failed to copy item in SharePoint.";
    //         }
    //     } catch (Exception $e) {
    //         // If there was an error, display an error message
    //         echo "Error: " . $e->getMessage();
    //     }
    // }




















-->Root Items

{
   "@odata.context":"https://graph.microsoft.com/v1.0/$metadata#Collection(driveItem)",

   "@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')/root/microsoft.graph.delta(token='NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzIwOTk3MTM0OTAwMDAwOzIwNzk3NTEyMzslMjM7JTIzOyUyMzA7JTIz')",
   

"value":[
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-09-17T21:32:23Z",
         "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
         "lastModifiedDateTime":"2023-10-05T10:48:08Z",
         "name":"root",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1",
         "size":404430,
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches"
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-09-17T21:32:23Z",
            "lastModifiedDateTime":"2023-10-05T10:48:08Z"
         },
         "folder":{
            "childCount":54
         },
         "root":{
            
         }
      },

 


-->Item Deleted

      {
         "@odata.type":"#microsoft.graph.driveItem",
         "id":"01FJOJ76CJWGUZWPE2DFDIFDFHAJQ24AMW",
         "cTag":"\"c:{9BA9B149-9A3C-4619-828C-A70261AE0196},4294967295\"",
         "size":0,
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76FWSRN3LOF3JZF3TLFXLVIAJBUH",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "deleted":{
            "state":"deleted"
         },
         "file":{
            "hashes":{
               "quickXorHash":"AAAAAAAAAAAAAAAAAAAAAAAAAAA="
            }
         },
         "fileSystemInfo":{
            
         },
         "shared":{
            "scope":"users"
         }
      },


-->Item Modified/Changed

      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-05T10:47:18Z",
         "eTag":"\"{DAB6A690-F94C-4535-8B39-19AA86BC33A8},3\"",
         "id":"01FJOJ76EQU23NUTHZGVCYWOIZVKDLYM5I",
         "lastModifiedDateTime":"2023-10-05T10:48:08Z",
         "name":"3Rename.txt",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/3Rename.txt",
         "cTag":"\"c:{DAB6A690-F94C-4535-8B39-19AA86BC33A8},1\"",
         "size":11,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "file":{
            "mimeType":"text/plain",
            "hashes":{
               "quickXorHash":"a1ADGdaghjWQQQ1rOwMZAAAAAAA="
            }
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-05T10:47:18Z",
            "lastModifiedDateTime":"2023-10-05T10:48:08Z"
         },
         "shared":{
            "scope":"users"
         }
      }




   ]
}




--> Item Created


{
   "@odata.type":"#microsoft.graph.driveItem",
   "createdDateTime":"2023-10-05T11:09:40Z",
   "eTag":"\"{8DEBD6CC-0235-4C00-87A0-9EC51275D6DE},1\"",
   "id":"01FJOJ76GM23VY2NICABGIPIE6YUJHLVW6",
   "lastModifiedDateTime":"2023-10-05T11:09:40Z",
   "name":"folderfolder",
   "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/folderfolder",
   "cTag":"\"c:{8DEBD6CC-0235-4C00-87A0-9EC51275D6DE},0\"",
   "size":0,
   "createdBy":{
      "user":{
         "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
         "id":"bca9e92f-03f8-4a64-b004-33a938607261",
         "displayName":"Muhammad Hamza"
      }
   },
   "lastModifiedBy":{
      "user":{
         "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
         "id":"bca9e92f-03f8-4a64-b004-33a938607261",
         "displayName":"Muhammad Hamza"
      }
   },
   "parentReference":{
      "driveType":"documentLibrary",
      "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
      "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
      "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:",
      "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
   },
   "fileSystemInfo":{
      "createdDateTime":"2023-10-05T11:09:40Z",
      "lastModifiedDateTime":"2023-10-05T11:09:40Z"
   },
   "folder":{
      "childCount":0
   },
   "shared":{
      "scope":"users"
   }
}





---->Item After Modified

    {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-05T11:09:40Z",
         "eTag":"\"{8DEBD6CC-0235-4C00-87A0-9EC51275D6DE},3\"",
         "id":"01FJOJ76GM23VY2NICABGIPIE6YUJHLVW6",
         "lastModifiedDateTime":"2023-10-05T11:15:04Z",
         "name":"folderfolder2",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/folderfolder2",
         "cTag":"\"c:{8DEBD6CC-0235-4C00-87A0-9EC51275D6DE},0\"",
         "size":0,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"








getItemById
listById


         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-05T11:09:40Z",
            "lastModifiedDateTime":"2023-10-05T11:15:04Z"
         },
         "folder":{
            "childCount":0
         },
         "shared":{
            "scope":"users"
         }







$createdDateTime = $data['createdDateTime'][$i];
        $lastModifiedDateTime = $data['lastModifiedDateTime'][$i];





 // Check if the 'value' array exists in the JSON data
 if (isset($data['value']) && is_array($data['value'])) {
    // Start iterating from the second element (index 1)
    for ($i = 1; $i < count($data['value']); $i++) {
        $item = $data['value'][$i];
        
        // Check if 'id' and 'name' keys exist in the current item
        if (isset($item['createdDateTime']) && isset($item['lastModifiedDateTime'])) {
           
        //$createdDateTime = $item['createdDateTime'][$i];
        $createdDateTime = new DateTime($item['createdDateTime'][$i]);
        //$lastModifiedDateTime = $item['lastModifiedDateTime'][$i];
        $lastModifiedDateTime = new DateTime($item['lastModifiedDateTime'][$i]);
        $itemid = $item['id'];
        //$itemname = $item['name'];
       echo $createdDateTime->format('Y-m-d H:i:s');
       echo $lastModifiedDateTime->format('Y-m-d H:i:s');




$createdDateTime = $item['createdDateTime'];
    $lastModifiedDateTime = $item['lastModifiedDateTime'];
    
    // Convert the date and time to a string
    $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
    $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));
    
    // Print the results
    echo "Created DateTime: $createdDateTimeString\n";
    echo "Last Modified DateTime: $lastModifiedDateTimeString\n";

      
Created DateTime: 2023-10-05 16:27:47 Last Modified DateTime: 2023-10-05 16:41:46
 

            // If the operation was successful, display a success message
            echo "Delta successfully for item: createdDateTime (id: $itemid)\n";
            echo "Delta successfully for item: lastModifiedDateTime (id: $itemid)\n";
            $localDirectory = __DIR__ . '/../src/LocalDrive';
            // Call the downloadItemById function with extracted values

           // downloadItemById($client, $driveId, $itemname, $itemid);
        } else {
            echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
        }
    }
} else {
    echo "Error: 'value' array not found in the JSON response.\n";
}





01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ
456.txt



,"id":"01FJOJ76GSXOZS4SXMURB2TEQQ6NDPK3H6","lastModifiedDateTime":"2023-10-06T12:18:18Z","name":"folder123","


"id":"01FJOJ76HSXD7LGVCMZZH3RI5HDRVRKNB3","lastModifiedDateTime":"2023-10-06T12:18:39Z","name":"folder123456"


function downloadItemById($client, $driveId, $itemname, $itemId, $localDirectory)
{
    // Define the local file/folder path
    $localFilePath = $localDirectory . '/' . $itemname;

    echo $localFilePath;
    
    // Check if the item (file or folder) already exists locally
    if (file_exists($localFilePath)) {
        echo "Item already exists at: $localFilePath\n";
    } else {
        // Get information about the item
        $itemInfo = $client->drive($driveId)->getItemById($itemId);

        if ($itemInfo !== false) {
            $data = json_decode($itemInfo, true);
            $Name = $data['name'];
            $ID = $data['id'];

            if ($data['folder']) {
                // If the item is a folder, create the local folder
                if (mkdir($localFilePath, 0777, true)) {
                    echo "Folder created successfully at: $localFilePath\n";

                    // Recursively download the contents of the folder
                    $children = $client->drive($driveId)->listById($itemId);
                    $data = json_decode($children, true);

                    if (isset($data['value']) && is_array($data['value'])) {
                        // Iterate through the children items
                        foreach ($data['value'] as $child) {
                            downloadItemById($client, $driveId, $child['name'], $child['id'], $localFilePath);
                        }
                    } else {
                        echo "Error: 'value' array not found in the JSON response.\n";
                    }
                } else {
                    echo "Failed to create folder at: $localFilePath\n";
                }
            } else {
                // If the item is a file, download and save it
                $response = $client->drive($driveId)->downloadItemById($itemId);
                if ($response !== false) {
                    if (file_put_contents($localFilePath, $response) !== false) {
                        echo "File saved successfully to $localFilePath\n";
                    } else {
                        echo "Failed to save the file to $localFilePath\n";
                    }
                } else {
                    echo "Failed to download the file.\n";
                }
            }
        } else {
            echo "Failed to get item information.\n";
        }
    }
}


 function downloadItemById($client, $driveId, $itemname, $itemId,$localDirectory)
    {

        // Define the local directory where you want to save the item
        //$localDirectory = __DIR__ . '/../src/LocalDrive';

        // Define the local file/folder path
       // $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;
        $localFilePath = $localDirectory .'/'. $itemname;

        echo $localFilePath;
        // Check if the item (file or folder) already exists locally
        if (file_exists($localFilePath)) {
            echo "Item already exists at: $localFilePath\n";
        } else {
            // Get information about the item
            $itemInfo = $client->drive($driveId)->getItemById($itemId);

            //if ($itemInfo !== false) {
            $data = json_decode($itemInfo, true);
            $Name= $data['name'];
            $ID= $data['id'];
            // if ($data['folder']) {
            //     $Folder='Folder';
            //     echo "Item Name: $Name\n";
            //     echo "Item Content: $Name\n";
            //     echo "Item Type: $Folder\n";
            //     echo "SharePoint ID: $ID\n";
            // }
            // else{
            //     $File='File';
            //      echo "Item Name: $Name\n";
            //      echo "Item Content: $Name\n";
            //      echo "Item Type: $File\n";
            //      echo "SharePoint ID: $ID\n";
            // }
          


            if ($data['folder']) {
                // If the item is a folder, create the local folder
                if (mkdir($localFilePath, 0777, true)) {
                    echo "Folder created successfully at: $localFilePath\n";
                } else {
                    echo "Failed to create folder at: $localFilePath\n";
                }

                // Recursively download the contents of the folder
                $children = $client->drive($driveId)->listById($itemId);
                $data = json_decode($children, true);
                $childname = $data['name'];
                echo $childname;
                //echo $children;

                    if (isset($data['value']) && is_array($data['value'])) {
                            // Start iterating from the second element (index 1)
                            for ($i = 0; $i < count($data['value']); $i++) {
                                $item = $data['value'][$i];

                                // Check if 'id' and 'name' keys exist in the current item
                                if (isset($item['parentReference'])) {
                                    $parentReference = $item['parentReference'];
                                    
                                    $itemid = $parentReference['id'];
                                    echo $itemid;
                                    //$itemName = basename($itemid);
                                    $itemName = $Name;
                                    //$localItemPath = $localDirectory . '/' . $itemName;
                                    echo $itemName;
                //     $localPath = __DIR__ . '\LocalDrive/4567.txt';
                $localItemPath = __DIR__ . '\LocalDrive/'. $itemName .'/'. $childname;
                echo $localItemPath;

                 foreach ($children as $child) {
                    downloadItemById($client, $driveId, $child['name'], $child['id'],$localItemPath);

                }

                                   

                                   
                                } else {
                                    echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                }
                            }
                        } else {
                            echo "Error: 'value' array not found in the JSON response.\n";
                        }

                // foreach ($children as $child) {
                //     downloadItemById($client, $driveId, $child['name'], $child['id'],$localItemPath);

                // }
            } else {
                // If the item is a file, download and save it
                $response = $client->drive($driveId)->downloadItemById($itemId);
                if ($response !== false) {
                    if (file_put_contents($localFilePath, $response) !== false) {
                        echo "File saved successfully to $localFilePath\n";
                    } else {
                        echo "Failed to save the file to $localFilePath\n";
                    }
                } else {
                    echo "Failed to download the file.\n";
                }
            }

            //}
            //}
            // else {
            //     echo "Failed to get item information.\n";
            // }
        }
    }




//after remove duplication
function downloadItemById($client, $driveId, $itemname, $itemId, $localDirectory)
{
    // Define the local file/folder path
    $localFilePath = $localDirectory . '/' . $itemname;

    echo $localFilePath;

    // Check if the item (file or folder) already exists locally
    if (file_exists($localFilePath)) {
        echo "Item already exists at: $localFilePath\n";
    } else {
        // Get information about the item
        $itemInfo = $client->drive($driveId)->getItemById($itemId);

        if ($itemInfo !== false) {
            $data = json_decode($itemInfo, true);
            $Name = $data['name'];
            $ID = $data['id'];

            if ($data['folder']) {
                // If the item is a folder, create the local folder
                if (mkdir($localFilePath, 0777, true)) {
                    echo "Folder created successfully at: $localFilePath\n";

                    // Recursively download the contents of the folder
                    $children = $client->drive($driveId)->listById($itemId);
                    $data = json_decode($children, true);

                    if (isset($data['value']) && is_array($data['value'])) {
                        // Iterate through the children items
                        foreach ($data['value'] as $child) {
                            // Add a condition to prevent duplication outside the folder
                            if (strpos($child['parentReference']['id'], $itemId) === 0) {
                                downloadItemById($client, $driveId, $child['name'], $child['id'], $localFilePath);
                            }
                        }
                    } else {
                        echo "Error: 'value' array not found in the JSON response.\n";
                    }
                } else {
                    echo "Failed to create folder at: $localFilePath\n";
                }
            } else {
                // If the item is a file, download and save it
                $response = $client->drive($driveId)->downloadItemById($itemId);
                if ($response !== false) {
                    if (file_put_contents($localFilePath, $response) !== false) {
                        echo "File saved successfully to $localFilePath\n";
                    } else {
                        echo "Failed to save the file to $localFilePath\n";
                    }
                } else {
                    echo "Failed to download the file.\n";
                }
            }
        } else {
            echo "Failed to get item information.\n";
        }
    }
}




---with duplicating
   function downloadItemById($client, $driveId, $itemname, $itemId, $localDirectory)
{
    // Define the local file/folder path
    $localFilePath = $localDirectory . '/' . $itemname;

    echo $localFilePath;
    
    // Check if the item (file or folder) already exists locally
    if (file_exists($localFilePath)) {
        echo "Item already exists at: $localFilePath\n";
    } else {
        // Get information about the item
        $itemInfo = $client->drive($driveId)->getItemById($itemId);

        if ($itemInfo !== false) {
            $data = json_decode($itemInfo, true);
            $Name = $data['name'];
            $ID = $data['id'];

            if ($data['folder']) {
                // If the item is a folder, create the local folder
                if (mkdir($localFilePath, 0777, true)) {
                    echo "Folder created successfully at: $localFilePath\n";

                    // Recursively download the contents of the folder
                    $children = $client->drive($driveId)->listById($itemId);
                    $data = json_decode($children, true);

                    if (isset($data['value']) && is_array($data['value'])) {
                        // Iterate through the children items
                        foreach ($data['value'] as $child) {
                            downloadItemById($client, $driveId, $child['name'], $child['id'], $localFilePath);
                        }
                    } else {
                        echo "Error: 'value' array not found in the JSON response.\n";
                    }
                } else {
                    echo "Failed to create folder at: $localFilePath\n";
                }
            } else {
                // If the item is a file, download and save it
                $response = $client->drive($driveId)->downloadItemById($itemId);
                if ($response !== false) {
                    if (file_put_contents($localFilePath, $response) !== false) {
                        echo "File saved successfully to $localFilePath\n";
                    } else {
                        echo "Failed to save the file to $localFilePath\n";
                    }
                } else {
                    echo "Failed to download the file.\n";
                }
            }
        } else {
            echo "Failed to get item information.\n";
        }
    }
}






function downloadItemById($client, $driveId, $itemname, $itemId, $localDirectory)
    {
        // Define the local file/folder path
        $localFilePath = $localDirectory . '/' . $itemname;
    
        //echo $localFilePath;
    
        // Check if the item (file or folder) already exists locally
        if (file_exists($localFilePath)) {
            echo "Item already exists at: $localFilePath\n";
        } else {
            // Get information about the item
            $itemInfo = $client->drive($driveId)->getItemById($itemId);
    
            if ($itemInfo !== false) {
                $data = json_decode($itemInfo, true);
                $Name = $data['name'];
                $ID = $data['id'];
    
                if ($data['folder']) {
                    // If the item is a folder, create the local folder
                    if (mkdir($localFilePath, 0777, true)) {
                        echo "Folder created successfully at: $localFilePath\n";
    
                        // Recursively download the contents of the folder
                        $children = $client->drive($driveId)->listById($itemId);
                        $data = json_decode($children, true);
    
                        if (isset($data['value']) && is_array($data['value'])) {
                            // Iterate through the children items
                            foreach ($data['value'] as $child) {
                                // Add a condition to prevent duplication outside the folder
                                if (strpos($child['parentReference']['id'], $itemId) === 0) {
                                    downloadItemById($client, $driveId, $child['name'], $child['id'], $localFilePath);
                                }
                            }
                        } else {
                            echo "Error: 'value' array not found in the JSON response.\n";
                        }
                    } else {
                        echo "Failed to create folder at: $localFilePath\n";
                    }
                } else {
                    // If the item is a file, download and save it
                    $response = $client->drive($driveId)->downloadItemById($itemId);
                    if ($response !== false) {
                        if (file_put_contents($localFilePath, $response) !== false) {
                            echo "File saved successfully to $localFilePath\n";
                        } else {
                            echo "Failed to save the file to $localFilePath\n";
                        }
                    } else {
                        echo "Failed to download the file.\n";
                    }
                }
            } else {
                echo "Failed to get item information.\n";
            }
        }
    }


"id":"01FJOJ76EIEB2ZRHWCNBCIFAZHAOSPHPTK","lastModifiedDateTime":"2023-10-06T07:59:03Z","name":"400.txt",








Creating a log file in PHP is a common practice for debugging, error tracking, and monitoring the activity of a PHP application. You can create a log file using the following steps:

1. **Choose a Location for the Log File:**
   Decide where you want to store the log file. It's typically a separate directory within your project's directory structure.

2. **Open or Create the Log File:**
   You can use PHP's `fopen()` function to open or create a log file. Here's an example of how to do it:

   ```php
   $logFilePath = 'logs/my_log_file.log';
   $logFile = fopen($logFilePath, 'a'); // 'a' mode for appending to the file
   ```

   In this example, `'logs/my_log_file.log'` is the path to your log file. If the file does not exist, it will be created. The `'a'` mode ensures that data is appended to the file rather than overwriting it.

3. **Write Log Entries:**
   You can use `fwrite()` to write log entries to the file. It's common to include a timestamp with each log entry for tracking when events occurred. Here's an example:

   ```php
   $message = "Something happened at " . date('Y-m-d H:i:s') . ": This is a log message.\n";
   fwrite($logFile, $message);
   ```

   This code writes a log message along with a timestamp to the log file. The `\n` at the end of the message adds a newline character for readability.

4. **Close the Log File:**
   When you're done writing log entries, it's essential to close the log file using `fclose()`:

   ```php
   fclose($logFile);
   ```

   This step is important to ensure that all data is flushed to the log file and that you don't leave any open file handles.

Here's a complete example:

```php
$logFilePath = 'logs/my_log_file.log';
$logFile = fopen($logFilePath, 'a');

if ($logFile) {
    $message = "Something happened at " . date('Y-m-d H:i:s') . ": This is a log message.\n";
    fwrite($logFile, $message);
    fclose($logFile);
} else {
    echo "Unable to open or create the log file.";
}
```

Make sure to replace `'logs/my_log_file.log'` with the actual path and name of the log file you want to use. Additionally, consider implementing error handling and log rotation to manage log file size and prevent it from growing indefinitely.




date('Y-m-d H:i:s') 
it is showing date in this format 2023-10-09 11:13:15 but my pakistan time is in this format 2023-10-09 02:13:15



// Set the timezone to Pakistan Standard Time (PKT)
date_default_timezone_set('Asia/Karachi');

// Get the current date and time in PKT format
$dateInPKT = date('Y-m-d H:i:s');

// Output the date and time
echo $dateInPKT;




which not contain the name in the json response
01FJOJ76HEG6CV5KYTQZEKRKZAGNGB6FPO


I have json file in this format

it gives error No local item found for remote item ID: 01FJOJ76HHHSRLB4J5FNFZWSXY2KX4IJQK




// Load the JSON data from the file
$jsonData = file_get_contents('your_json_file.json'); // Replace with the actual path to your JSON file

// Parse the JSON data into an associative array
$data = json_decode($jsonData, true);

// Define your local directory where the files are stored
$localDirectory = 'your_local_directory'; // Replace with the path to your local directory

// Loop through the "value" array in the JSON data
foreach ($data['value'] as $driveItem) {
    // Check if the driveItem is marked as deleted
    if (isset($driveItem['deleted']) && $driveItem['deleted']['state'] === 'deleted') {
        // Extract the information you need to identify the local file (e.g., name)
        $itemName = $driveItem['name'];

        // Construct the local item path based on the item's name
        $localItemPath = $localDirectory . '/' . $itemName;

        // Check if the local item exists and delete it
        if (file_exists($localItemPath)) {
            if (unlink($localItemPath)) {
                echo "Local Item '$itemName' Deleted Successfully at $localItemPath\n";
            } else {
                echo "Failed to delete Local Item '$itemName'\n";
            }
        } else {
            echo "Local Item '$itemName' does not exist at $localItemPath\n";
        }
    }
}


01FJOJ76BIQQ4WUVDOZBHZK2TAIUNWVQRG





//$localItemName = 'aaaa.txt';

// $localDirectory = __DIR__ . '/../src/LocalDrive';


// // Check if the mapping exists for the remote item ID
// if (isset($mappingDatabase[$remoteItemId])) {
//     // Retrieve the local item name based on the remote item ID
//     $localItemName = $mappingDatabase['name'];
    

//     // Delete the local item using your existing function
//     deleteItemlocally($client, $driveId, $remoteItemId, $localItemName, $localDirectory);

   
// } else {
//     echo "No local item found for remote item ID: $remoteItemId\n";
// }




//             $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse.js') ?: null; // Replace with the actual path to your JSON mapping file

//         // Read and parse the JSON file into an associative array
//         $mappingDatabase = json_decode(file_get_contents(__DIR__ . '/../storage/deltaResponse.js'), true);
//         //$mappingDatabase = json_decode($mappingFile, true);

//         // Assuming you have a JSON response containing the remote item's ID
// //$itemid = "01FJOJ76CJWGUZWPE2DFDIFDFHAJQ24AMW"; // Replace with the actual remote item ID

// // Check if the mapping exists for the remote item ID
// if (isset($mappingDatabase['id'])) {
//     // Retrieve the local item name based on the remote item ID
//     $localItemName = $mappingDatabase['name'];

//     // Delete the local item using your existing function
//     deleteItemlocally($client, $driveId, $itemid, $localItemName, $localDirectory);

//     // Perform remote deletion logic here
//     // ...
// } else {
//     echo "No local item found for remote item ID: $itemid\n";
// }


                        //$localDirectory = __DIR__ . '/../src/LocalDrive';
                        //deleteItemlocally($client, $driveId, $itemid, $itemName, $localDirectory);
    





function Delete($path)
{
    if (is_dir($path) === true)
    {
        $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path), RecursiveIteratorIterator::CHILD_FIRST);

        foreach ($files as $file)
        {
            if (in_array($file->getBasename(), array('.', '..')) !== true)
            {
                if ($file->isDir() === true)
                {
                    rmdir($file->getPathName());
                }

                else if (($file->isFile() === true) || ($file->isLink() === true))
                {
                    unlink($file->getPathname());
                }
            }
        }

        return rmdir($path);
    }

    else if ((is_file($path) === true) || (is_link($path) === true))
    {
        return unlink($path);
    }

    return false;
}



$localPath = __DIR__ . '\LocalDrive/'.$itemoldname;

store_log($messagelog)


$messagelog =  "Folder created successfully at: $localFilePath\n";
                        store_log($messagelog);




// $logFilePath = __DIR__ . '/../src/log.log';
                        // $logFile = fopen($logFilePath, 'a');

                        // if ($logFile) {
                        //     date_default_timezone_set('Asia/Karachi');
                        //     $message = $messagefolder . date('Y-m-d H:i:s') . ".\n";
                        //     fwrite($logFile, $message);
                        //     fclose($logFile);
                        // } else {
                        //     echo "Unable to open or create the log file.";
                        // }


// $logFilePath = __DIR__ . '/../src/log.log';
                            // $logFile = fopen($logFilePath, 'a');

                            // if ($logFile) {
                            //     date_default_timezone_set('Asia/Karachi');
                            //     $message = $messagefolder . date('Y-m-d H:i:s') . ".\n";
                            //     fwrite($logFile, $message);
                            //     fclose($logFile);

                            // } else {
                            //     echo "Unable to open or create the log file.";
                            // }


 // Add a condition to check if the child's parent ID matches the current folder's ID
                                // if ($child['parentReference']['id'] === $itemId) {
                                //     downloadItemById($client, $driveId, $child['name'], $child['id'], $localFilePath);
                                // }





 //if item has deleted
            // if (isset($data['value']) && is_array($data['value'])) {
            //     // Start iterating from the second element (index 1)
            //     for ($i = 1; $i <= count($data['value']); $i++) {
            //         //echo count($data['value']);
            //         $item = $data['value'][$i];
            //         if (isset($item['deleted']) && $item['deleted']['state'] === 'deleted') {
            //         // Check if 'id' and 'name' keys exist in the current item
            //         //if (!(isset($item['createdDateTime']) && isset($item['lastModifiedDateTime']))) {
            //             $itemid = $item['id'];
            //            // echo "Previous Id:" . $itemid;
            //             //$itemname = $item['name'];
            //             //$itemName='ftest2.txt';

            //             // $ID= $item['id'];
            //             // if ($item['folder']) {
            //             //     $Folder='Folder';
            //             //     echo "Item ID: $ID\n";
            //             //     echo "Item Type: $Folder\n";

            //             // }
            //             // else{
            //             //     $File='File';
            //             //     echo "Item ID: $ID\n";
            //             //      echo "Item Type: $File\n";

            //             // }

            //             $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null; 
            //             $mappingDatabase = json_decode($mappingFile, true);
            //             $remoteItemId = $itemid;
            //             if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //                 // Start iterating from the second element (index 1)
            //                 for ($i = 1; $i <= count($mappingDatabase['value']); $i++) {
            //                     $itemDatabase = $mappingDatabase['value'][$i];
            //                     $remoteItemIdNew = $remoteItemId;

            //                     // Check if 'id' and 'name' keys exist in the current item
            //                     if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

            //                         $itemnameDatabase = $itemDatabase['name'];
            //                         $localDirectory = __DIR__ . '/../src/LocalDrive';
            //                         deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabase, $localDirectory);
                                    
            //                         //deleteItem($client, $driveId, $remoteItemIdNew,$itemnameDatabase, $localDirectory);
            //                     } else {
            //                         //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //                     }
            //                 }
            //             } else {
            //                 echo "Error: 'value' array not found in the JSON response.\n";
            //             }
            //         } else {
            //             echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //         }
            //     }
            // } else {
            //     echo "Error: 'value' array not found in the JSON response.\n";
            // }



function downloadItemById($client, $driveId, $itemname, $itemId, $localDirectory)
{
    // Define the local file/folder path
    $localFilePath = $localDirectory . '/' . $itemname;

    // Check if the item (file or folder) already exists locally
    if (file_exists($localFilePath)) {
        echo "Item already exists at: $localFilePath\n";
        return; // Skip downloading if it already exists
    }

    // Get information about the item
    $itemInfo = $client->drive($driveId)->getItemById($itemId);

    if ($itemInfo !== false) {
        $data = json_decode($itemInfo, true);
        $Name = $data['name'];
        $ID = $data['id'];

        if ($data['folder']) {


 if (mkdir($localFilePath, 0777, true)) {
                        echo "Folder created successfully at: $localFilePath\n";
                        $messagelog =  "Folder created successfully at: $localFilePath\n";
                        store_log($messagelog);

            // Recursively download the contents of the folder
            $children = $client->drive($driveId)->listById($itemId);
            $data = json_decode($children, true);

            if (isset($data['value']) && is_array($data['value'])) {
                // Iterate through the children items
                foreach ($data['value'] as $child) {
                    downloadItemById($client, $driveId, $child['name'], $child['id'], $localDirectory . '/' . $itemname);
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }

else {
                        echo "Failed to create folder at: $localFilePath\n";
                    }
        } else {
            // If the item is a file, download and save it
            if (file_put_contents($localFilePath, $client->drive($driveId)->downloadItemById($itemId)) !== false) {
                echo "File saved successfully to $localFilePath\n";
                $messagelog =  "File created successfully at: $localFilePath\n";
                store_log($messagelog);
            } else {
                echo "Failed to save the file to $localFilePath\n";
            }
        }
    } else {
        echo "Failed to get item information.\n";
    }
}



$source=__DIR__ . '/../src/LocalDrive/fff12';
    $destination=__DIR__ . '/../src/LocalDrive/4000';
    copy_directory($source,$destination);

    function copy_directory($source,$destination) { 
        $directory = opendir($source); 
        @mkdir($destination); 
        while(false !== ( $file = readdir($directory)) ) { 
            if (( $file != '.' ) && ( $file != '..' )) { 
                if ( is_dir($source . '/' . $file) ) { 
                    copy_directory($source . '/' . $file,$destination . '/' . $file); 
                } 
                else { 
                    copy($source . '/' . $file,$destination . '/' . $file); 
                } 
            } 
        } 
        closedir($directory); 

    } 



{"@odata.type":"#microsoft.graph.driveItem",
"createdDateTime":"2023-10-05T08:52:06Z",
"eTag":"\"{48F439A2-640B-408A-8A7F-40D12BAD8664},1\"",
"id":"01FJOJ76FCHH2EQC3ERJAIU72A2EV23BTE",
"lastModifiedDateTime":"2023-10-05T08:52:06Z",
"name":"6.txt",
"webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/6.txt",
"cTag":"\"c:{48F439A2-640B-408A-8A7F-40D12BAD8664},1\"",
"size":0,"createdBy":{"user":{"email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com","id":"bca9e92f-03f8-4a64-b004-33a938607261","displayName":"Muhammad Hamza"}},"lastModifiedBy":{"user":{"email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com","id":"bca9e92f-03f8-4a64-b004-33a938607261","displayName":"Muhammad Hamza"}},"parentReference":{"driveType":"documentLibrary","driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches","id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ","path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:","siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"},"file":{"mimeType":"text/plain","hashes":{"quickXorHash":"AAAAAAAAAAAAAAAAAAAAAAAAAAA="}},"fileSystemInfo":{"createdDateTime":"2023-10-05T08:52:06Z","lastModifiedDateTime":"2023-10-05T08:52:06Z"},"shared":{"scope":"users"}},


//original
{
   "@odata.type":"#microsoft.graph.driveItem",
   "createdDateTime":"2023-10-05T08:52:06Z",
   "eTag":"\"{48F439A2-640B-408A-8A7F-40D12BAD8664},1\"",
   "id":"01FJOJ76FCHH2EQC3ERJAIU72A2EV23BTE",
   "lastModifiedDateTime":"2023-10-05T08:52:06Z",
   "name":"6.txt",
   "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/6.txt",
   "cTag":"\"c:{48F439A2-640B-408A-8A7F-40D12BAD8664},1\"",
   "size":0,
   "createdBy":{
      "user":{
         "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
         "id":"bca9e92f-03f8-4a64-b004-33a938607261",
         "displayName":"Muhammad Hamza"
      }
   },
   "lastModifiedBy":{
      "user":{
         "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
         "id":"bca9e92f-03f8-4a64-b004-33a938607261",
         "displayName":"Muhammad Hamza"
      }
   },
   "parentReference":{
      "driveType":"documentLibrary",
      "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
      "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
      "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:",
      "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
   },
   "file":{
      "mimeType":"text/plain",
      "hashes":{
         "quickXorHash":"AAAAAAAAAAAAAAAAAAAAAAAAAAA="
      }
   },
   "fileSystemInfo":{
      "createdDateTime":"2023-10-05T08:52:06Z",
      "lastModifiedDateTime":"2023-10-05T08:52:06Z"
   },
   "shared":{
      "scope":"users"
   }
}


//after moving
{
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-05T08:52:06Z",
         "eTag":"\"{48F439A2-640B-408A-8A7F-40D12BAD8664},2\"",
         "id":"01FJOJ76FCHH2EQC3ERJAIU72A2EV23BTE",
         "lastModifiedDateTime":"2023-10-05T08:52:06Z",
         "name":"6.txt",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/4000/6.txt",
         "cTag":"\"c:{48F439A2-640B-408A-8A7F-40D12BAD8664},1\"",
         "size":0,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76CMPFWN2FLL65FK7ZOB7YRIHOAC",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:/4000",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "file":{
            "mimeType":"text/plain",
            "hashes":{
               "quickXorHash":"AAAAAAAAAAAAAAAAAAAAAAAAAAA="
            }
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-05T08:52:06Z",
            "lastModifiedDateTime":"2023-10-05T08:52:06Z"
         },
         "shared":{
            "scope":"users"
         }
      },



01FJOJ76HBHLTFVVFSEFA3RQ6PJV5WN4MC
01FJOJ76HBHLTFVVFSEFA3RQ6PJV5WN4MC
https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/4000/Function_Testing8.txt


01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ






    if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 2; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['webUrl'])) {
                        $webUrl = $item['webUrl'];
                        // $lastModifiedDateTime = $item['lastModifiedDateTime'];
                         $itemid = $item['id'];
                         $itemname = $item['name'];
                         $parentReferencecId = $item['parentReference']['id'];
                            //echo $webUrl;
                            //echo $itemid;
                            //echo $itemname;

                        
                        

                            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                            $mappingDatabase = json_decode($mappingFile, true);
                            $remoteItemWebUrl = $webUrl;
                            $remoteItemId = $itemid;
                            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                // Start iterating from the second element (index 1)
                                for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                                    $itemDatabase = $mappingDatabase['value'][$j];
                                    $remoteItemWebUrlNew = $remoteItemWebUrl;
                                    $remoteItemIdNew = $remoteItemId;
                                    //echo $remoteItemIdNew;
                                    //echo $remoteItemWebUrlNew;

                                    // Check if 'id' and 'name' keys exist in the current item
                                    if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew && $itemDatabase['webUrl'] != $remoteItemWebUrlNew) {

                                        $itemidDatabase = $itemDatabase['parentReference']['id'];
                                        echo $itemidDatabase;
                                        $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                                        $mappingDatabase = json_decode($mappingFile, true);
                                       // $remoteItemWebUrl = $webUrl;
                                        $remoteItemIdParent = $itemidDatabase;
                                        if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                            // Start iterating from the second element (index 1)
                                            for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                                                $itemDatabaseParent = $mappingDatabase['value'][$k];
                                                //$remoteItemWebUrlNew = $remoteItemWebUrl;
                                                $remoteItemIdNewParent = $remoteItemIdParent;
            
                                                // Check if 'id' and 'name' keys exist in the current item
                                                if (isset($itemDatabaseParent['id']) && $itemDatabaseParent['id'] === $remoteItemIdNewParent) {
            
                                                    $itemnameDatabaseParent = $itemDatabaseParent['name'];
                                                    //echo $itemnameDatabaseParent;
                                                    if($itemnameDatabaseParent === 'root'){
                                                        $file=__DIR__ . '\LocalDrive/' . $itemname;
                                                        $to = __DIR__ . '\LocalDrive/';
                                                        echo $file;
                                                        echo $to;
                                                        move_file($file, $to);
                                                    }
                                                    else{
                                                        $file=__DIR__ . '\LocalDrive/' . $itemname;
                                                        $to = __DIR__ . '\LocalDrive/';
                                                       
                                                        echo $file;
                                                        echo $to;
                                                        
                                                        move_file($file, $to);
                                                    }
                                                    //$itemnameDatabaseParent = '4000';
            
                                                    
                                                    //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                                                    
                                                } else {
                                                    //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                                }
                                            }
                                        } else {
                                            echo "Error: 'value' array not found in the JSON response.\n";
                                        }



                                        //$localPath = __DIR__ . '\LocalDrive/' . $itemnameDatabase;
                                        //move_file($itemname, $to);
                                        //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                                        
                                    } else {
                                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                    }
                                }
                            } else {
                                echo "Error: 'value' array not found in the JSON response.\n";
                            }
                        
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }





 if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['webUrl'])) {
                        $webUrl = $item['webUrl'];
                        
                         $itemid = $item['id'];
                         $itemname = $item['name'];
                             
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }




count($data['value'])





  //if item has changed
            if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['createdDateTime']) && isset($item['lastModifiedDateTime'])) {
                        $createdDateTime = $item['createdDateTime'];
                        $lastModifiedDateTime = $item['lastModifiedDateTime'];
                        $itemid = $item['id'];
                        $itemname = $item['name'];
			$itemParentId = $item['parentReference']['id'];
                       

                        // Convert the date and time to a string
                        $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
                        $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));
                        if ($createdDateTimeString !== $lastModifiedDateTimeString) {

                            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                            $mappingDatabase = json_decode($mappingFile, true);
                            $remoteItemId = $itemid;
                            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                // Start iterating from the second element (index 1)
                                for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                                    $itemDatabase = $mappingDatabase['value'][$j];
                                    $remoteItemIdNew = $remoteItemId;
                                    

                                    // Check if 'id' and 'name' keys exist in the current item
                                    if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                        $itemnameDatabase = $itemDatabase['name'];
                                        
                                        //$localPath = __DIR__ . '\LocalDrive/'. $itemnameDatabase;
                                        //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                                    } else {
                                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                    }
                                }
                            } else {
                                echo "Error: 'value' array not found in the JSON response.\n";
                            }

			    $itemnameDatabaseOriginal = $itemnameDatabase; 
 			    $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                            $mappingDatabase = json_decode($mappingFile, true);
                            $remoteItemParentId = $itemParentId;
                            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                // Start iterating from the second element (index 1)
                                for ($k = 1; $k <= count($mappingDatabase['value']); $k++) {
                                    $itemDatabase = $mappingDatabase['value'][$k];
                                    $remoteItemParentIdNew = $remoteItemParentId;
                                    

                                    // Check if 'id' and 'name' keys exist in the current item
                                    if (isset($itemDatabase['parentReference']['id']) && $itemDatabase['parentReference']['id'] === $remoteItemParentIdNew) {

                                        $itemParentnameDatabase = $itemDatabase['name'];

                                        $itemnameDatabaseOriginalNew =$itemnameDatabaseOriginal;
                                        $localPath = __DIR__ . '\LocalDrive/'. $itemParentnameDatabase ."/". $itemnameDatabaseOriginalNew;
                                        updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                                    } else {
                                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                    }
                                }
                            } else {
                                echo "Error: 'value' array not found in the JSON response.\n";
                            }


                        }
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }






 function downloadFolder($client, $driveId, $itemname, $localDirectory)
    {
        // List the contents of the folder
        $folderContents = $client->drive($driveId)->delta();

        //$data = json_decode($folderContents, true);
        //$fodleelle = $data['parentReference'];
        echo $folderContents;
        if (!empty($folderContents)) {
            // Create the local folder to store the downloaded files
            $localFolderPath = $localDirectory . '/' . basename($itemname);
            if (!is_dir($localFolderPath)) {
                mkdir($localFolderPath, 0755, true);
            }

            foreach ($folderContents as $item) {
                if ($item['folder'] && $item['name'] != '.' && $item['name'] != '..') {
                    // If it's a folder, recursively download it
                    downloadFolder($client, $driveId, $item['name'], $localFolderPath);
                } elseif ($item['file']) {
                    // If it's a file, download it
                    $localFilePath = $localFolderPath . '/' . $item['name'];
                    $fileContent = $client->drive($driveId)->downloadItemByPath($item['name']);
                    file_put_contents($localFilePath, $fileContent);
                    echo "Downloaded file: $localFilePath\n";
                }
            }
            echo "Downloaded folder: $localFolderPath\n";
        } else {
            echo "Folder is empty or does not exist: $itemname\n";
        }
    }



function moveFileLocally($sourcePath, $destinationPath)
    {
        try {
            // Use the rename function to move the file
            if (rename($sourcePath, $destinationPath)) {
                echo "File moved successfully.\n";
            } else {
                echo "Failed to move file.\n";
            }
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error moving file: " . $e->getMessage();
        }
    }





    //Download Item By Path
    // function downloadItemByPath($client, $driveId, $itemname)
    // {
    //     $response = $client
    //         ->drive($driveId)
    //         ->downloadItemByPath($itemname);

    //     //// Define the local directory where you want to save the Item
    //     $localDirectory = __DIR__ . '/../src/LocalDrive';

    //     $imageContent = $response;
    //     $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;
    //     file_put_contents($localFilePath, $imageContent);

    //     if (file_put_contents($localFilePath, $imageContent) !== false) {
    //         echo 'Item saved successfully to ' . $localFilePath;
    //     } else {
    //         echo 'Failed to save the Item.';
    //     }
    // }





// function deltaByToken($client, $driveId, $tokendelta)
    // {
    //     try {
    //         $response = $client->drive($driveId)->delta($tokendelta);
    //         //echo $response;
    //         $data = json_decode($response, true);
    //         $itemid = $data['id'];
    //         $itemname = $data['name'];
    //         //echo $itemid;
    //         //echo $itemname;

    //         // If the operation was successful, display a success message
    //         echo "Delta successfully: " . $response;
    //     } catch (Exception $e) {
    //         // If there was an error, display an error message
    //         echo "Error: " . $e->getMessage();
    //     }
    //     // $data = json_decode($response, true);
    //     // $itemname = $data['name'];
    //     // $itemId = $data['id'];
    //     //downloadItemById($client, $driveId, $itemname, $itemid);
    //     //downloadItemByPath($client, $driveId, $itemname);  
    //     downloadItemById($client, $driveId, $itemname, $itemid);     
    //     //downloadItemById($client, $driveId, $itemname, $itemId);

    // }






 //Original WIthout Recursively
    //Download Item on Local Directory By Id
    // function downloadItemById($client, $driveId, $itemname, $itemId)
    // {

    //     // Define the local directory where you want to save the item
    //     $localDirectory = __DIR__ . '/../src/LocalDrive';

    //     // Define the local file/folder path
    //     $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;

    //     // Check if the item (file or folder) already exists locally
    //     if (file_exists($localFilePath)) {
    //         echo "Item already exists at: $localFilePath\n";
    //     } else {
    //         // Get information about the item
    //         $itemInfo = $client->drive($driveId)->getItemById($itemId);

    //         //if ($itemInfo !== false) {
    //         $data = json_decode($itemInfo, true);
    //         $Name= $data['name'];
    //         $ID= $data['id'];
    //         if ($data['folder']) {
    //             $Folder='Folder';
    //             echo "Item Name: $Name\n";
    //             echo "Item Content: $Name\n";
    //             echo "Item Type: $Folder\n";
    //             echo "SharePoint ID: $ID\n";
    //         }
    //         else{
    //             $File='File';
    //              echo "Item Name: $Name\n";
    //              echo "Item Content: $Name\n";
    //              echo "Item Type: $File\n";
    //              echo "SharePoint ID: $ID\n";
    //         }



    //         if ($data['folder']) {
    //             // If the item is a folder, create the local folder
    //             if (mkdir($localFilePath, 0777, true)) {
    //                 echo "Folder created successfully at: $localFilePath\n";
    //             } else {
    //                 echo "Failed to create folder at: $localFilePath\n";
    //             }

    //             // Recursively download the contents of the folder
    //             $children = $client->drive($driveId)->listById($itemId);


    //             foreach ($children as $child) {
    //                 downloadItemById($client, $driveId, $child['name'], $child['id']);

    //             }
    //         } else {
    //             // If the item is a file, download and save it
    //             $response = $client->drive($driveId)->downloadItemById($itemId);
    //             if ($response !== false) {
    //                 if (file_put_contents($localFilePath, $response) !== false) {
    //                     echo "File saved successfully to $localFilePath\n";
    //                 } else {
    //                     echo "Failed to save the file to $localFilePath\n";
    //                 }
    //             } else {
    //                 echo "Failed to download the file.\n";
    //             }
    //         }

    //         //}
    //         //}
    //         // else {
    //         //     echo "Failed to get item information.\n";
    //         // }
    //     }
    // }






// creating a directory named gfg 
        // $dirname = "gfg"; 

        // // removing directory using rmdir() 
        // if(rmdir($localItemPath)) 
        // { 
        //   echo ("$localItemPath successfully removed"); 
        // } 
        // else
        // { 
        //  echo ($localItemPath . "couldn't be removed");  
        // } 

        // Check if the local item exists and delete it
        // if (file_exists($localItemPath)) {
        //     if (unlink($localItemPath)) {
        //         echo "Local Item Deleted Successfully at $localItemPath\n";
        //     } else {
        //         echo "Failed to delete Local Item\n";
        //     }
        // } else {
        //     echo "Local Item does not exist at $localItemPath\n";
        // }



 //echo "Item Name: $itemname \n";

            //echo "Item Content: $itemContent \n";
            //echo "Item Location: $parentname \n";
            // echo "Item Name: $itemname \n";


 $itemContent = $itemName;
            $parentname = $parentName;


 // echo "Previous Id:" . $itemid;
                        //  //$itemname = $item['name'];
                        //             //$itemName='ftest2.txt';

                        //             // $ID= $item['id'];
                        //             // if ($item['folder']) {
                        //             //     $Folder='Folder';
                        //             //     echo "Item ID: $ID\n";
                        //             //     echo "Item Type: $Folder\n";

                        //             // }
                        //             // else{
                        //             //     $File='File';
                        //             //     echo "Item ID: $ID\n";
                        //             //      echo "Item Type: $File\n";

                        //             // }





delta
deltaByToken
downloadItemByIdLocally
getItemByIdSharePoint
getItemByPathSharePoint
getItemsSharePoint
deleteItemSharePoint
deleteItemBoth
deleteItemlocally
moveItemSharePoint
move_file_Locally
copyItemSharePoint
copyFilesLocally
updateItemLocally
updateItemBoth
updateItemSharePoint
listItemByIdSharePoint
listItemByPathSharePoint
listItemsSharePoint
createFolderBoth
createFolderLocally
createFolderSharePoint
uploadItemSharePoint
uploadItemtoPathSharePoint



Upload File/Folder on SharePoint in Specific Folder by File/Folder Name and
    // its Content(if it is a file) and Specific Folder Name 
    //and Download in Local Directory By Id


01FJOJ76FBUDQMTPMILVHIQSKKXLOZVGTW
fdelta126666

01FJOJ76E4IQVE3IDBNJBJQ2O6BT6FMFNB

Empty Folder not Copy



DemoFolder45C:\xampp\htdocs\sharepoint-sdk-example-main\src\LocalDrive/DemoFolder45/DemoFolder45Local file/directory not found.01FJOJ76FSKRJVEDB64
01FJOJ76HKOML37VG7IVAYOTV5Y67N2KNN
01FJOJ76GXJRO3KYSBIBELQ3BRSX376HKD
01FJOJ76ETFMLSTJGJ4VAYYTGEOSH3JILT









//if item has changed
if (isset($data['value']) && is_array($data['value'])) {
    // Start iterating from the second element (index 1)
    for ($i = 1; $i <= count($data['value']); $i++) {
        $item = $data['value'][$i];

        // Check if 'id' and 'name' keys exist in the current item
        if (isset($item['createdDateTime']) && isset($item['lastModifiedDateTime'])) {
            $createdDateTime = $item['createdDateTime'];
            $lastModifiedDateTime = $item['lastModifiedDateTime'];
            $itemid = $item['id'];
            $itemname = $item['name'];
            $itemParentId = $item['parentReference']['id'];
           

            // Convert the date and time to a string
            $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
            $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));
            if ($createdDateTimeString !== $lastModifiedDateTimeString) {

                $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                $mappingDatabase = json_decode($mappingFile, true);
                $remoteItemId = $itemid;
                if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                    // Start iterating from the second element (index 1)
                    for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                        $itemDatabase = $mappingDatabase['value'][$j];
                        $remoteItemIdNew = $remoteItemId;
                        //echo $remoteItemIdNew;
                        

                        // Check if 'id' and 'name' keys exist in the current item
                        if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                            $itemnameDatabase = $itemDatabase['name'];
                            //echo $itemnameDatabase;
                            
                            //$localPath = __DIR__ . '\LocalDrive/'. $itemnameDatabase;
                            //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                        } else {
                            //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                        }
                    }
                } else {
                    echo "Error: 'value' array not found in the JSON response.\n";
                }

            $itemnameDatabaseOriginal = $itemnameDatabase; 
            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                $mappingDatabase = json_decode($mappingFile, true);
                $remoteItemParentId = $itemParentId;
                if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                    // Start iterating from the second element (index 1)
                    for ($k = 1; $k <= count($mappingDatabase['value']); $k++) {
                        $itemDatabase = $mappingDatabase['value'][$k];
                        $remoteItemParentIdNew = $remoteItemParentId;
                        //echo $remoteItemParentIdNew;
                        

                        // Check if 'id' and 'name' keys exist in the current item
                        if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemParentIdNew) {

                            $itemParentnameDatabase = $itemDatabase['name'];
                            //echo $itemParentnameDatabase;

                            $itemnameDatabaseOriginalNew =$itemnameDatabaseOriginal;
                            //echo $itemnameDatabaseOriginalNew;
                            $localPath = __DIR__ . '\LocalDrive/'. $itemParentnameDatabase ."/". $itemnameDatabaseOriginalNew;
                            //echo $localPath;
                            //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                        } else {
                            //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                        }
                    }
                } else {
                    echo "Error: 'value' array not found in the JSON response.\n";
                }


            }
        } else {
            echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
        }
    }
} else {
    echo "Error: 'value' array not found in the JSON response.\n";
}







////original before adding weburl


   //if item has changed/Renamed
            if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['createdDateTime']) && isset($item['lastModifiedDateTime'])) {
                        $createdDateTime = $item['createdDateTime'];
                        $lastModifiedDateTime = $item['lastModifiedDateTime'];
                        $itemid = $item['id'];
                        $itemname = $item['name'];
                        


                        // Convert the date and time to a string
                        $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
                        $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));
                        if ($createdDateTimeString !== $lastModifiedDateTimeString) {

                            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                            $mappingDatabase = json_decode($mappingFile, true);
                            $remoteItemId = $itemid;
                            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                // Start iterating from the second element (index 1)
                                for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                                    $itemDatabase = $mappingDatabase['value'][$j];
                                    $remoteItemIdNew = $remoteItemId;


                                    // Check if 'id' and 'name' keys exist in the current item
                                    if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                        $itemnameDatabase = $itemDatabase['name'];

                                        $localPath = __DIR__ . '\LocalDrive/' . $itemnameDatabase;
                                        updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                                    } else {
                                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                    }
                                }
                            } else {
                                echo "Error: 'value' array not found in the JSON response.\n";
                            }
                        }
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }









//original before adding weburl
//if new item has created/uploaded

            // Check if the 'value' array exists in the JSON data
            if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['id']) && isset($item['name'])) {
                        $itemid = $item['id'];
                        $itemname = $item['name'];
                        $localDirectory = __DIR__ . '/../src/LocalDrive';
                        downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }


//original before adding weburl
//if item has deleted   
            if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    //echo count($data['value']);
                    $item = $data['value'][$i];
                    if (isset($item['deleted']) && $item['deleted']['state'] === 'deleted') {
                        // Check if 'id' and 'name' keys exist in the current item
                        //         //if (!(isset($item['createdDateTime']) && isset($item['lastModifiedDateTime']))) {
                        $itemid = $item['id'];


                        $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                        $mappingDatabase = json_decode($mappingFile, true);
                        $remoteItemId = $itemid;
                        if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                            // Start iterating from the second element (index 1)
                            for ($j = 1; $j <= count($mappingDatabase['value']); $j++) { // Use $j for the inner loop
                                $itemDatabase = $mappingDatabase['value'][$j];
                                $remoteItemIdNew = $remoteItemId;

                                // Check if 'id' and 'name' keys exist in the current item
                                if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {
                                    $itemnameDatabase = $itemDatabase['name'];
                                    $localDirectory = __DIR__ . '/../src/LocalDrive';
                                    deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabase, $localDirectory);
                                } else {
                                    //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                }
                            }
                        } else {
                            echo "Error: 'value' array not found in the JSON response.\n";
                        }
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }






                           
                           
count($data['value'])

                                  


//if item has deleted new
if (isset($data['value']) && is_array($data['value'])) {
    // Start iterating from the second element (index 1)
    for ($i = 1; $i <= count($data['value']); $i++) {
        $item = $data['value'][$i];

        // Check if 'id' and 'name' keys exist in the current item
        if (isset($item['deleted']) && $item['deleted']['state'] === 'deleted') {

            $itemid = $item['id'];
            //$itemname = $item['name'];
            $itemParentId = $item['parentReference']['id'];

            

                $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                $mappingDatabase = json_decode($mappingFile, true);
                $remoteItemId = $itemid;
                if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                    // Start iterating from the second element (index 1)
                    for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                        $itemDatabase = $mappingDatabase['value'][$j];
                        $remoteItemIdNew = $remoteItemId;
                        //echo $remoteItemIdNew;


                        // Check if 'id' and 'name' keys exist in the current item
                        if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                            $itemnameDatabase = $itemDatabase['name'];
                            //echo $itemnameDatabase;

                            
                        } else {
                            //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                        }
                    }
                } else {
                    echo "Error: 'value' array not found in the JSON response.\n";
                }

                $itemnameDatabaseOriginal = $itemnameDatabase;
                $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                $mappingDatabase = json_decode($mappingFile, true);
                $remoteItemParentId = $itemParentId;
                if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                    // Start iterating from the second element (index 1)
                    for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                        $itemDatabase = $mappingDatabase['value'][$k];
                        $remoteItemParentIdNew = $remoteItemParentId;
                        //echo $remoteItemParentIdNew;


                        // Check if 'id' and 'name' keys exist in the current item
                        if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemParentIdNew) {

                            $itemParentnameDatabase = $itemDatabase['name'];
                            $itemParentWebUrl = $itemDatabase['webUrl'];
                            //echo $itemParentWebUrl;

                            // // Find the position of "Library1" in the URL
                            $libraryPosition = strpos($itemParentWebUrl, "Library1");

                            if ($libraryPosition !== false) {
                                // Extract the value after "Library1" and everything after it
                                $value = substr($itemParentWebUrl, $libraryPosition + strlen("Library1"));
                                echo "Extracted value: " . $value;
                            } else {
                                echo "Value not found in the URL.";
                            }

                         echo "Extracted value: " . $value;

                          if($value === ' '){
                            $itemnameDatabaseOriginalNew = $itemnameDatabaseOriginal;
                            echo $itemnameDatabaseOriginalNew;
                            //$localPath = __DIR__ . '\LocalDrive/' . $itemnameDatabaseOriginalNew;
                            //echo $localPath;
                            //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);

                            $localDirectory =  __DIR__ . '\LocalDrive';
                            echo $localDirectory;
                            //deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabaseOriginalNew, $localDirectory);
                          }
                          else{

                          
                            $itemnameDatabaseOriginalNew = $itemnameDatabaseOriginal;
                            echo $itemnameDatabaseOriginalNew;
                            //$localPath = __DIR__ . '\LocalDrive' . $value ."/" . $itemnameDatabaseOriginalNew;
                            //echo $localPath;
                            //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);

                            $localDirectory = __DIR__ . '\LocalDrive' . $value;
                                  echo $localDirectory;
                               // deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabaseOriginalNew, $localDirectory);
                        }
                        } else {
                            //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                        }
                    }
                } else {
                    echo "Error: 'value' array not found in the JSON response.\n";
                }
            
        } else {
            echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
        }
    }
} else {
    echo "Error: 'value' array not found in the JSON response.\n";
}






// //if item has deleted   
            // if (isset($data['value']) && is_array($data['value'])) {
            //     // Start iterating from the second element (index 1)
            //     for ($i = 1; $i <= count($data['value']); $i++) {
            //         //echo count($data['value']);
            //         $item = $data['value'][$i];
            //         if (isset($item['deleted']) && $item['deleted']['state'] === 'deleted') {
            //             // Check if 'id' and 'name' keys exist in the current item
            //             //         //if (!(isset($item['createdDateTime']) && isset($item['lastModifiedDateTime']))) {
            //             $itemid = $item['id'];
            //             $itemParentId = $item['parentReference']['id'];

            //             $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            //             $mappingDatabase = json_decode($mappingFile, true);
            //             $remoteItemId = $itemid;
            //             if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //                 // Start iterating from the second element (index 1)
            //                 for ($j = 1; $j <= count($mappingDatabase['value']); $j++) { // Use $j for the inner loop
            //                     $itemDatabase = $mappingDatabase['value'][$j];
            //                     $remoteItemIdNew = $remoteItemId;

            //                     // Check if 'id' and 'name' keys exist in the current item
            //                     if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {
            //                         $itemnameDatabase = $itemDatabase['name'];

            //                         //$localDirectory = __DIR__ . '/../src/LocalDrive';
            //                         //deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabase, $localDirectory);
            //                     } else {
            //                         //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //                     }
            //                 }
            //             } else {
            //                 echo "Error: 'value' array not found in the JSON response.\n";
            //             }

            //             $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            //             $mappingDatabase = json_decode($mappingFile, true);
            //             $remoteItemParentId = $itemParentId;
            //             $itemnameDatabaseOriginal=$itemnameDatabase;
            //             if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //                 // Start iterating from the second element (index 1)
            //                 for ($j = 0; $j <= count($mappingDatabase['value']); $j++) { // Use $j for the inner loop
            //                     $itemDatabase = $mappingDatabase['value'][$j];
            //                     $remoteItemParentIdNew = $remoteItemParentId;


            //                     // Check if 'id' and 'name' keys exist in the current item
            //                     if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemParentIdNew) {
            //                         $itemParentWebUrlDatabase = $itemDatabase['webUrl'];

            //                         // // Find the position of "Library1" in the URL
            //                         $libraryPosition = strpos($itemParentWebUrlDatabase, "Library1");

            //                         if ($libraryPosition !== false) {
            //                             // Extract the value after "Library1" and everything after it
            //                             $value = substr($itemParentWebUrlDatabase, $libraryPosition + strlen("Library1"));
            //                             echo "Extracted value: " . $value;
            //                         } else {
            //                             echo "Value not found in the URL.";
            //                         }

            //                      echo "Extracted value: " . $value;

            //                       if($value === ' '){

            //                         $localDirectory = __DIR__ . '/../src/LocalDrive/'. $itemnameDatabaseOriginal;
            //                        // deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabaseOriginal, $localDirectory);

                                    
            //                       }
            //                       else{
            //                         echo $itemnameDatabaseOriginal;
            //                       $localDirectory = __DIR__ . '/../src/LocalDrive' . $value ."/" . $itemnameDatabaseOriginal;
            //                       echo $localDirectory;
            //                     //deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabaseOriginal, $localDirectory);
                                    
            //                     }

            //                         //$localItemPath = $localDirectory . '/' . $itemName;
            //                         //$localDirectory = __DIR__ . '/../src/LocalDrive'. "/" . $itemParentWebUrlDatabase;
            //                         //deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabase, $localDirectory);
            //                     } else {
            //                         //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //                     }
            //                 }
            //             } else {
            //                 echo "Error: 'value' array not found in the JSON response.\n";
            //             }

            //         } else {
            //             echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //         }
            //     }
            // } else {
            //     echo "Error: 'value' array not found in the JSON response.\n";
            // }









// if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                //     // Start iterating from the second element (index 1)
                //     for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                //         $itemDatabase = $mappingDatabase['value'][$k];
                //         $remoteItemParentIdNew = $remoteItemParentId;
                //         //echo $remoteItemParentIdNew;


                //         // Check if 'id' and 'name' keys exist in the current item
                //         if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemParentIdNew) {

                //             $itemParentnameDatabase = $itemDatabase['name'];
                //             $itemParentWebUrl = $itemDatabase['webUrl'];
                //             //echo $itemParentWebUrl;

                //             // // Find the position of "Library1" in the URL
                //             $libraryPosition = strpos($itemParentWebUrl, "Library1");

                //             if ($libraryPosition !== false) {
                //                 // Extract the value after "Library1" and everything after it
                //                 $value = substr($itemParentWebUrl, $libraryPosition + strlen("Library1"));
                //                 echo "Extracted value: " . $value;
                //             } else {
                //                 echo "Value not found in the URL.";
                //             }

                //          echo "Extracted value: " . $value;

                //           if($value === ' '){
                //             $itemnameDatabaseOriginalNew = $itemnameDatabaseOriginal;
                //             echo $itemnameDatabaseOriginalNew;
                //             //$localPath = __DIR__ . '\LocalDrive/' . $itemnameDatabaseOriginalNew;
                //             //echo $localPath;
                //             //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);

                //             $localDirectory =  __DIR__ . '\LocalDrive';
                //             echo $localDirectory;
                //             //deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabaseOriginalNew, $localDirectory);
                //           }
                //           else{

                          
                //             $itemnameDatabaseOriginalNew = $itemnameDatabaseOriginal;
                //             echo $itemnameDatabaseOriginalNew;
                //             //$localPath = __DIR__ . '\LocalDrive' . $value ."/" . $itemnameDatabaseOriginalNew;
                //             //echo $localPath;
                //             //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);

                //             $localDirectory = __DIR__ . '\LocalDrive' . $value;
                //                   echo $localDirectory;
                //                // deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabaseOriginalNew, $localDirectory);
                //         }
                //         } else {
                //             //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                //         }
                //     }
                // } else {
                //     echo "Error: 'value' array not found in the JSON response.\n";
                // }




 //  if($value === ' '){
                           
                            

                        //     $localDirectory =  __DIR__ . '\LocalDrive';
                        //     //echo $localDirectory;
                        //     deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabaseOriginalNew, $localDirectory);
                        //   }
                        //   else{
                        //     $localDirectory = __DIR__ . '\LocalDrive' . $value;
                        //     deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemnameDatabaseOriginalNew, $localDirectory);
                        // }



// $url = "https://5jd7y6.sharepoint.com/sites/SPFX3/Library1";

    // // Find the position of "Library1" in the URL
    // $libraryPosition = strpos($url, "Library1");

    // if ($libraryPosition !== false) {
    //     // Extract the value after "Library1" and everything after it
    //     $value = substr($url, $libraryPosition + strlen("Library1"));
    //     echo "Extracted value: " . $value;
    // } else {
    //     echo "Value not found in the URL.";
    // }




$response = $client->drive($driveId)->delta();
        echo $response;
        file_put_contents(__DIR__ . '/../storage/deltaResponse', $response);

if this file already contains response then replace that response with the new response




//Creating Nested Folder

{
   "@odata.context":"https://graph.microsoft.com/v1.0/$metadata#Collection(driveItem)",
   "@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')/root/microsoft.graph.delta(token='NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzI3ODcyNDUwODMwMDAwOzIwOTMwOTYxNDslMjM7JTIzOyUyMzA7JTIz')",
   "value":[
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-09-17T21:32:23Z",
         "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
         "lastModifiedDateTime":"2023-10-13T09:47:25Z",
         "name":"root",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1",
         "size":250316,
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches"
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-09-17T21:32:23Z",
            "lastModifiedDateTime":"2023-10-13T09:47:25Z"
         },
         "folder":{
            "childCount":42
         },
         "root":{
            
         }
      },
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-13T09:46:58Z",
         "eTag":"\"{E96E0AE3-9E5A-4479-9771-C01C3A76C2F8},1\"",
         "id":"01FJOJ76HDBJXOSWU6PFCJO4OADQ5HNQXY",
         "lastModifiedDateTime":"2023-10-13T09:46:58Z",
         "name":"f5",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/f5",
         "cTag":"\"c:{E96E0AE3-9E5A-4479-9771-C01C3A76C2F8},0\"",
         "size":0,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-13T09:46:58Z",
            "lastModifiedDateTime":"2023-10-13T09:46:58Z"
         },
         "folder":{
            "childCount":1
         },
         "shared":{
            "scope":"users"
         }
      },
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-13T09:47:09Z",
         "eTag":"\"{4C3C5651-3A5A-4444-9BF9-40B0C1546997},1\"",
         "id":"01FJOJ76CRKY6EYWR2IRCJX6KAWDAVI2MX",
         "lastModifiedDateTime":"2023-10-13T09:47:09Z",
         "name":"f555",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/f5/f555",
         "cTag":"\"c:{4C3C5651-3A5A-4444-9BF9-40B0C1546997},0\"",
         "size":0,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76HDBJXOSWU6PFCJO4OADQ5HNQXY",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:/f5",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-13T09:47:09Z",
            "lastModifiedDateTime":"2023-10-13T09:47:09Z"
         },
         "folder":{
            "childCount":1
         },
         "shared":{
            "scope":"users"
         }
      },
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-13T09:47:25Z",
         "eTag":"\"{2800100A-4982-4D01-8A19-05D84BF26835},1\"",
         "id":"01FJOJ76AKCAACRASJAFGYUGIF3BF7E2BV",
         "lastModifiedDateTime":"2023-10-13T09:47:25Z",
         "name":"500.txt",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/f5/f555/500.txt",
         "cTag":"\"c:{2800100A-4982-4D01-8A19-05D84BF26835},1\"",
         "size":19,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76CRKY6EYWR2IRCJX6KAWDAVI2MX",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:/f5/f555",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "file":{
            "mimeType":"text/plain",
            "hashes":{
               "quickXorHash":"lYYxpGFcAxjAoAYwuwEMYFADGMA="
            }
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-13T09:47:25Z",
            "lastModifiedDateTime":"2023-10-13T09:47:25Z"
         },
         "shared":{
            "scope":"users"
         }
      }
   ]
}

$itemId, $itemName, 


error_log($messagelog)

$errorlog = "Error: " . $e->getMessage();
error_log($errorlog);

    //This functions track changes of files/folders Renamed on SharePoint
    function function_for_Rename_Item($data)
    {
        global $client;
        global $driveId;
        if (isset($data['value']) && is_array($data['value'])) {
            // Start iterating from the second element (index 1)
            for ($i = 1; $i <= count($data['value']); $i++) {
                $item = $data['value'][$i];

                // Check if 'id' and 'name' keys exist in the current item
                if (isset($item['createdDateTime']) && isset($item['lastModifiedDateTime'])) {
                    $createdDateTime = $item['createdDateTime'];
                    $lastModifiedDateTime = $item['lastModifiedDateTime'];
                    $itemid = $item['id'];
                    $itemNewName = $item['name'];
                    $itemParentId = $item['parentReference']['id'];



                    // Convert the date and time to a string
                    $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
                    $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));
                    if ($createdDateTimeString !== $lastModifiedDateTimeString) {

                        $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                        $mappingDatabase = json_decode($mappingFile, true);
                        $remoteItemId = $itemid;
                        if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                            // Start iterating from the second element (index 1)
                            for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                                $itemDatabase = $mappingDatabase['value'][$j];
                                $remoteItemIdNew = $remoteItemId;



                                // Check if 'id' and 'name' keys exist in the current item
                                if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                    $itemOldName = $itemDatabase['name'];
                                } else {
                                    //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                }
                            }
                        } else {
                            //echo "Error: 'value' array not found in the JSON response.\n";
                        }

                        $itemOldNameOld = $itemOldName;
                        $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                        $mappingDatabase = json_decode($mappingFile, true);
                        $remoteItemParentId = $itemParentId;
                        if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                            // Start iterating from the second element (index 1)
                            for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                                $itemDatabase = $mappingDatabase['value'][$k];
                                $remoteItemParentIdNew = $remoteItemParentId;



                                // Check if 'id' and 'name' keys exist in the current item
                                if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemParentIdNew) {

                                    $itemParentnameDatabase = $itemDatabase['name'];
                                    $itemParentWebUrl = $itemDatabase['webUrl'];


                                    // // Find the position of "Library1" in the URL
                                    $libraryPosition = strpos($itemParentWebUrl, "Library1");
   
                                    if ($libraryPosition !== false) {
                                        // Extract the value after "Library1" and everything after it
                                        $value = substr($itemParentWebUrl, $libraryPosition + strlen("Library1"));
                                    } else {
                                        //echo "Value not found in the URL.";
                                    }



                                    if ($value === ' ') {
                                        $itemOldNameOldOld = $itemOldNameOld;

                                        $localPath = __DIR__ . '\LocalDrive/' . $itemOldNameOldOld;

                                        updateItemLocally($itemNewName, $localPath);
                                        delta();
                                    } else {


                                        $itemOldNameOldOld = $itemOldNameOld;

                                        $localPath = __DIR__ . '\LocalDrive' . $value . "/" . $itemOldNameOldOld;

                                        updateItemLocally($itemNewName, $localPath);
                                        delta();
                                    }
                                } else {
                                    //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                }
                            }
                        } else {
                           // echo "Error: 'value' array not found in the JSON response.\n";
                        }
                    }
                } else {
                  //  echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                }
            }
        } else {
           // echo "Error: 'value' array not found in the JSON response.\n";
        }
    }







//After Rename

{
   "@odata.context":"https://graph.microsoft.com/v1.0/$metadata#Collection(driveItem)",
   "@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')/root/microsoft.graph.delta(token='NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzI3ODc4NDU5NDMwMDAwOzIwOTMwOTkyMTslMjM7JTIzOyUyMzA7JTIz')",
   "value":[
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-09-17T21:32:23Z",
         "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
         "lastModifiedDateTime":"2023-10-13T09:57:25Z",
         "name":"root",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1",
         "size":250335,
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches"
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-09-17T21:32:23Z",
            "lastModifiedDateTime":"2023-10-13T09:57:25Z"
         },
         "folder":{
            "childCount":42
         },
         "root":{
            
         }
      },
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-13T09:46:58Z",
         "eTag":"\"{E96E0AE3-9E5A-4479-9771-C01C3A76C2F8},1\"",
         "id":"01FJOJ76HDBJXOSWU6PFCJO4OADQ5HNQXY",
         "lastModifiedDateTime":"2023-10-13T09:46:58Z",
         "name":"f5",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/f5",
         "cTag":"\"c:{E96E0AE3-9E5A-4479-9771-C01C3A76C2F8},0\"",
         "size":19,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-13T09:46:58Z",
            "lastModifiedDateTime":"2023-10-13T09:46:58Z"
         },
         "folder":{
            "childCount":1
         },
         "shared":{
            "scope":"users"
         }
      },
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-13T09:47:09Z",
         "eTag":"\"{4C3C5651-3A5A-4444-9BF9-40B0C1546997},3\"",
         "id":"01FJOJ76CRKY6EYWR2IRCJX6KAWDAVI2MX",
         "lastModifiedDateTime":"2023-10-13T09:57:25Z",
         "name":"f555Rename",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/f5/f555Rename",
         "cTag":"\"c:{4C3C5651-3A5A-4444-9BF9-40B0C1546997},0\"",
         "size":19,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76HDBJXOSWU6PFCJO4OADQ5HNQXY",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:/f5",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-13T09:47:09Z",
            "lastModifiedDateTime":"2023-10-13T09:57:25Z"
         },
         "folder":{
            "childCount":1
         },
         "shared":{
            "scope":"users"
         }
      }
   ]
}



itemNewName
itemOldName
itemOldNameOld

$itemOldNameOldOld = $itemOldNameOld;



// function delta($client, $driveId)
    // {
    //     $response = $client->drive($driveId)->delta();
    //     echo $response;
    //     file_put_contents(__DIR__ . '/../storage/deltaResponse', $response);

        
    //     $data = json_decode($response, true);
    //     $tokendelta = substr($data['@odata.deltaLink'], 124, 151); // Extract from position 3 to 38
    //     file_put_contents(__DIR__ . '/../storage/deltaToken', $tokendelta);
    // }








  //if new item has created/uploaded
            //count($data['value'])
            // Check if the 'value' array exists in the JSON data
            if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['id']) && isset($item['name'])) {
                        $itemid = $item['id'];
                        $itemname = $item['name'];
                        $createdDateTime = $item['createdDateTime'];
                        $lastModifiedDateTime = $item['lastModifiedDateTime'];

                        // Convert the date and time to a string
                        $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
                        $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));

                        if ($createdDateTimeString === $lastModifiedDateTimeString) {

                            $localDirectory = __DIR__ . '/../src/LocalDrive';
                            downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                            delta($client, $driveId);
                        }


                        // $localDirectory = __DIR__ . '/../src/LocalDrive';
                        // downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }





function_for_Create_Item($client, $driveId,$data){

  //if new item has created/uploaded
            //count($data['value'])
            // Check if the 'value' array exists in the JSON data
            if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['id']) && isset($item['name'])) {
                        $itemid = $item['id'];
                        $itemname = $item['name'];
                        $createdDateTime = $item['createdDateTime'];
                        $lastModifiedDateTime = $item['lastModifiedDateTime'];

                        // Convert the date and time to a string
                        $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
                        $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));

                    //     if ($createdDateTimeString === $lastModifiedDateTimeString) {

                    //         //$localDirectory = __DIR__ . '/../src/LocalDrive';

                    //        // downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                    //         //delta($client, $driveId);
                        
                    //     $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                    //     $mappingDatabase = json_decode($mappingFile, true);
                    //     $remoteItemId = $itemid;
                    //     if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                    //         // Start iterating from the second element (index 1)
                    //         for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                    //             $itemDatabase = $mappingDatabase['value'][$j];
                    //             $remoteItemIdNew = $remoteItemId;
                    //             //echo $remoteItemIdNew;


                    //             // Check if 'id' and 'name' keys exist in the current item
                    //             if (isset($itemDatabase['id']) && $itemDatabase['id'] != $remoteItemIdNew )  {

                    //                 // if ($createdDateTimeString === $lastModifiedDateTimeString) {

                    //                      $localDirectory = __DIR__ . '/../src/LocalDrive';

                    //                      downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                    //                 //     //delta($client, $driveId);
                    //                 // }
            
                    //             } else {
                    //                 //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    //             }

                    //         }
                    //     } else {
                    //         echo "Error: 'value' array not found in the JSON response.\n";
                    //     }
                    // }


                        if ($createdDateTimeString === $lastModifiedDateTimeString) {

                            $localDirectory = __DIR__ . '/../src/LocalDrive';
                            downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                            //delta($client, $driveId);
                        }


                        // $localDirectory = __DIR__ . '/../src/LocalDrive';
                        // downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }
}





function for_Rename_Item($client, $driveId,$data){
 if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['createdDateTime']) && isset($item['lastModifiedDateTime'])) {
                        $createdDateTime = $item['createdDateTime'];
                        $lastModifiedDateTime = $item['lastModifiedDateTime'];
                        $itemid = $item['id'];
                        $itemNewName = $item['name'];
                        $itemParentId = $item['parentReference']['id'];



                        // Convert the date and time to a string
                        $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
                        $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));
                        if ($createdDateTimeString !== $lastModifiedDateTimeString) {

                            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                            $mappingDatabase = json_decode($mappingFile, true);
                            $remoteItemId = $itemid;
                            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                // Start iterating from the second element (index 1)
                                for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                                    $itemDatabase = $mappingDatabase['value'][$j];
                                    $remoteItemIdNew = $remoteItemId;
                                    //echo $remoteItemIdNew;


                                    // Check if 'id' and 'name' keys exist in the current item
                                    if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                        $itemOldName = $itemDatabase['name'];
                                        //echo $itemnameDatabase;

                                        //$localPath = __DIR__ . '\LocalDrive/'. $itemnameDatabase;
                                        //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                                    } else {
                                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                    }
                                }
                            } else {
                                echo "Error: 'value' array not found in the JSON response.\n";
                            }

                            $itemOldNameOld = $itemOldName;
                            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                            $mappingDatabase = json_decode($mappingFile, true);
                            $remoteItemParentId = $itemParentId;
                            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                // Start iterating from the second element (index 1)
                                for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                                    $itemDatabase = $mappingDatabase['value'][$k];
                                    $remoteItemParentIdNew = $remoteItemParentId;
                                    //echo $remoteItemParentIdNew;


                                    // Check if 'id' and 'name' keys exist in the current item
                                    if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemParentIdNew) {

                                        $itemParentnameDatabase = $itemDatabase['name'];
                                        $itemParentWebUrl = $itemDatabase['webUrl'];
                                        //echo $itemParentWebUrl;

                                        // // Find the position of "Library1" in the URL
                                        $libraryPosition = strpos($itemParentWebUrl, "Library1");

                                        if ($libraryPosition !== false) {
                                            // Extract the value after "Library1" and everything after it
                                            $value = substr($itemParentWebUrl, $libraryPosition + strlen("Library1"));
                                            echo "Extracted value: " . $value;
                                        } else {
                                            echo "Value not found in the URL.";
                                        }

                                        echo "Extracted value: " . $value;

                                        if ($value === ' ') {
                                            $itemOldNameOldOld = $itemOldNameOld;
                                            //echo $itemnameDatabaseOriginalNew;
                                            $localPath = __DIR__ . '\LocalDrive/' . $itemOldNameOldOld;
                                            echo $localPath;
                                            updateItemLocally($client, $driveId, $itemid, $itemNewName, $localPath);
                                            //delta($client, $driveId);
                                        } else {


                                            $itemOldNameOldOld = $itemOldNameOld;
                                            //echo $itemnameDatabaseOriginalNew;
                                            $localPath = __DIR__ . '\LocalDrive' . $value . "/" . $itemOldNameOldOld;
                                            echo $localPath;
                                            updateItemLocally($client, $driveId, $itemid, $itemNewName, $localPath);
                                            // delta($client, $driveId);
                                        }
                                    } else {
                                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                    }
                                }
                            } else {
                                echo "Error: 'value' array not found in the JSON response.\n";
                            }
                        }
                       // delta($client, $driveId);
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }
}







function for_delete_Item($client, $driveId,$data){
   if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['deleted']) && $item['deleted']['state'] === 'deleted') {

                        $itemid = $item['id'];
                        //$itemname = $item['name'];

                        $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                        $mappingDatabase = json_decode($mappingFile, true);
                        $remoteItemId = $itemid;
                        if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                            // Start iterating from the second element (index 1)
                            for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                                $itemDatabase = $mappingDatabase['value'][$j];
                                $remoteItemIdNew = $remoteItemId;
                                //echo $remoteItemIdNew;
                                // Check if 'id' and 'name' keys exist in the current item
                                if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                    $itemOldNameOld = $itemDatabase['name'];
                                    $itemWebUrl = $itemDatabase['webUrl'];

                                    // // Find the position of "Library1" in the URL
                                    $libraryPosition = strpos($itemWebUrl, "Library1");

                                    if ($libraryPosition !== false) {
                                        // Extract the value after "Library1" and everything after it
                                        $value = substr($itemWebUrl, $libraryPosition + strlen("Library1"));
                                        echo "Extracted value: " . $value;
                                    } else {
                                        echo "Value not found in the URL.";
                                    }

                                    //echo "Extracted value: " . $value;

                                    $localDirectory = __DIR__ . '\LocalDrive' . $value;
                                    deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemOldNameOld, $localDirectory);
                                } else {
                                    //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                }
                                //delta($client, $driveId);
                            }
                            delta($client, $driveId);
                        } else {
                            echo "Error: 'value' array not found in the JSON response.\n";
                        }
                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }
}



function for_moving_Item($client, $driveId,$data){
   if (isset($data['value']) && is_array($data['value'])) {
                // Start iterating from the second element (index 1)
                for ($i = 1; $i <= count($data['value']); $i++) {
                    $item = $data['value'][$i];

                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($item['id']) && isset($item['name'])) {
                        //$webUrl = $item['webUrl'];
                        // $lastModifiedDateTime = $item['lastModifiedDateTime'];
                         $itemid = $item['id'];
                         $itemname = $item['name'];
                         $parentReferencecId = $item['parentReference']['id'];
                            //echo $webUrl;
                            //echo $itemid;
                            //echo $itemname;



                            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                            $mappingDatabase = json_decode($mappingFile, true);
                            //$remoteItemWebUrl = $webUrl;
                            $remoteItemId = $itemid;
                            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                // Start iterating from the second element (index 1)
                                for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                                    $itemDatabase = $mappingDatabase['value'][$j];
                                    //$remoteItemWebUrlNew = $remoteItemWebUrl;
                                    $remoteItemIdNew = $remoteItemId;
                                    //echo $remoteItemIdNew;
                                    //echo $remoteItemWebUrlNew;

                                    // Check if 'id' and 'name' keys exist in the current item
                                    if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                        $itemUrlDatabase = $itemDatabase['webUrl'];

                                        // // Find the position of "Library1" in the URL
                                        $libraryPosition = strpos($itemUrlDatabase, "Library1");

                                        if ($libraryPosition !== false) {
                                            // Extract the value after "Library1" and everything after it
                                            $valueItem = substr($itemUrlDatabase, $libraryPosition + strlen("Library1"));
                                            echo "Extracted value: " . $valueItem;
                                        } else {
                                            echo "Value not found in the URL.";
                                        }

                                        //echo $itemNameDatabase;
                                            // $file=__DIR__ . '\LocalDrive/' . $itemname;
                                            // $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;
                                            // echo $file;
                                            // echo $to;
                                            // move_file($file, $to);

                                        // if($itemNameDatabase === 'root'){
                                        //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                        //     $to = __DIR__ . '\LocalDrive/';
                                        //     echo $file;
                                        //     echo $to;
                                        //     move_file($file, $to);
                                        //     //recursive_files_copy($file, $to); 
                                        // }
                                        // else{
                                        //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                        //     $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;

                                        //     echo $file;
                                        //     echo $to;
                                        //     //recursive_files_copy($file, $to); 
                                        //     move_file($file, $to);
                                        // }
                                        //$itemnameDatabaseParent = '4000';

                                    } else {
                                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                    }
                                }
                            } else {
                                echo "Error: 'value' array not found in the JSON response.\n";
                            }

                            $valueItemnew=$valueItem;
                            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                            $mappingDatabase = json_decode($mappingFile, true);
                            //$remoteItemWebUrl = $webUrl;
                            $remoteparentReferencecId = $parentReferencecId;
                            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                                // Start iterating from the second element (index 1)
                                for ($j = 0; $j <= count($mappingDatabase['value']); $j++) {
                                    $itemDatabase = $mappingDatabase['value'][$j];
                                    //$remoteItemWebUrlNew = $remoteItemWebUrl;
                                    $remoteremoteparentReferencecIdNew = $remoteparentReferencecId;
                                    //echo $remoteItemIdNew;
                                    //echo $remoteItemWebUrlNew;

                                    // Check if 'id' and 'name' keys exist in the current item
                                    if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteremoteparentReferencecIdNew) {

                                        $itemUrlDatabaseParent = $itemDatabase['webUrl'];

                                        // // Find the position of "Library1" in the URL
                                        $libraryPosition = strpos($itemUrlDatabaseParent, "Library1");

                                        if ($libraryPosition !== false) {
                                            // Extract the value after "Library1" and everything after it
                                            $valueParent = substr($itemUrlDatabaseParent, $libraryPosition + strlen("Library1"));
                                            echo "Extracted value: " . $valueParent;
                                        } else {
                                            echo "Value not found in the URL.";
                                        }

                                        
                                            $file=__DIR__ . '\LocalDrive/' . $valueItem;
                                            $to = __DIR__ . '\LocalDrive/'. $valueParent;
                                            echo $file;
                                            echo $to;
                                            move_file_Locally($file, $to);

                                        // if($itemNameDatabase === 'root'){
                                        //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                        //     $to = __DIR__ . '\LocalDrive/';
                                        //     echo $file;
                                        //     echo $to;
                                        //     move_file($file, $to);
                                        //     //recursive_files_copy($file, $to); 
                                        // }
                                        // else{
                                        //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                        //     $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;

                                        //     echo $file;
                                        //     echo $to;
                                        //     //recursive_files_copy($file, $to); 
                                        //     move_file($file, $to);
                                        // }
                                        //$itemnameDatabaseParent = '4000';

                                    } else {
                                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                    }
                                }
                            } else {
                                echo "Error: 'value' array not found in the JSON response.\n";
                            }


                    } else {
                        echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }
}





//Before Moving

{
   "@odata.type":"#microsoft.graph.driveItem",
   "createdDateTime":"2023-10-13T07:58:07Z",
   "eTag":"\"{8284D8D7-D2BD-4EC1-9BF0-4B99E47B61D9},1\"",
   "id":"01FJOJ76GX3CCIFPOSYFHJX4CLTHSHWYOZ",
   "lastModifiedDateTime":"2023-10-13T07:58:07Z",
   "name":"300.txt",
   "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/300.txt",
   "cTag":"\"c:{8284D8D7-D2BD-4EC1-9BF0-4B99E47B61D9},1\"",
   "size":0,
   "createdBy":{
      "user":{
         "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
         "id":"bca9e92f-03f8-4a64-b004-33a938607261",
         "displayName":"Muhammad Hamza"
      }
   },
   "lastModifiedBy":{
      "user":{
         "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
         "id":"bca9e92f-03f8-4a64-b004-33a938607261",
         "displayName":"Muhammad Hamza"
      }
   },
   "parentReference":{
      "driveType":"documentLibrary",
      "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
      "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
      "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:",
      "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
   },
   "file":{
      "mimeType":"text/plain",
      "hashes":{
         "quickXorHash":"AAAAAAAAAAAAAAAAAAAAAAAAAAA="
      }
   },
   "fileSystemInfo":{
      "createdDateTime":"2023-10-13T07:58:07Z",
      "lastModifiedDateTime":"2023-10-13T07:58:07Z"
   },
   "shared":{
      "scope":"users"
   }
}



//After Moving


      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-13T09:33:20Z",
         "eTag":"\"{48D94893-4AE6-495C-BEFF-444DE2DF4ACC},3\"",
         "id":"01FJOJ76ETJDMURZSKLRE3572EJXRN6SWM",
         "lastModifiedDateTime":"2023-10-13T09:34:02Z",
         "name":"f1234",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/f1234",
         "cTag":"\"c:{48D94893-4AE6-495C-BEFF-444DE2DF4ACC},0\"",
         "size":0,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-13T09:33:20Z",
            "lastModifiedDateTime":"2023-10-13T09:34:02Z"
         },
         "folder":{
            "childCount":1
         },
         "shared":{
            "scope":"users"
         }
      },
      {
         "@odata.type":"#microsoft.graph.driveItem",
         "createdDateTime":"2023-10-13T07:58:07Z",
         "eTag":"\"{8284D8D7-D2BD-4EC1-9BF0-4B99E47B61D9},2\"",
         "id":"01FJOJ76GX3CCIFPOSYFHJX4CLTHSHWYOZ",
         "lastModifiedDateTime":"2023-10-13T07:58:07Z",
         "name":"300.txt",
         "webUrl":"https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/f1234/300.txt",
         "cTag":"\"c:{8284D8D7-D2BD-4EC1-9BF0-4B99E47B61D9},1\"",
         "size":0,
         "createdBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "lastModifiedBy":{
            "user":{
               "email":"Muhammad.Hamza@5jd7y6.onmicrosoft.com",
               "id":"bca9e92f-03f8-4a64-b004-33a938607261",
               "displayName":"Muhammad Hamza"
            }
         },
         "parentReference":{
            "driveType":"documentLibrary",
            "driveId":"b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches",
            "id":"01FJOJ76ETJDMURZSKLRE3572EJXRN6SWM",
            "path":"/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root:/f1234",
            "siteId":"f1ca5f03-3099-486b-a44a-e808d7a0c7fd"
         },
         "file":{
            "mimeType":"text/plain",
            "hashes":{
               "quickXorHash":"AAAAAAAAAAAAAAAAAAAAAAAAAAA="
            }
         },
         "fileSystemInfo":{
            "createdDateTime":"2023-10-13T07:58:07Z",
            "lastModifiedDateTime":"2023-10-13T07:58:07Z"
         },
         "shared":{
            "scope":"users"
         }
      }
   



300.txt

f1234

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNTg0NzIwNDAwMDAwOzIwOTgyODg1NDslMjM7JTIzOyUyMzA7JTIz




NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNTg5MTUxODAwMDAwOzIwOTgzMDc5ODslMjM7JTIzOyUyMzA7JTIz

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNTg5NTU4MTcwMDAwOzIwOTgzMTAxODslMjM7JTIzOyUyMzA7JTIz




"@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives/b!A1_K8Zkwa0ikSugI16
DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root/delta?token=
NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4Mz
MwNTkyMDY5MzcwMDAwOzIwOTgzMjA4MzslMjM7JTIzOyUyMzA7JTIz"


"@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives('b!A1_K8Zkwa0ikSugI1
6DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')/root/microsoft.graph.delta
(token='NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4
MzMwNTkyMzYzODAwMDAwOzIwOTgzMjI2MjslMjM7JTIzOyUyMzA7JTIz')","value":[]}





"@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives/b!A1_K8Zkwa0ikSugI16
DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root/delta?token=NDslMjM0OyUyMzE7
MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM
4MzMwNTk4NTk
zOD
cwMDAwOzIwOTg0N
TQ5M
DslMjM7JTIzOyUyMzA7JTIz"

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNTk4NTkzODcwMDAwOzIwOTg0NTQ5MDslMjM7JTIzOyUyMzA7JTIz



"@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')/root/microsoft.graph.delta(token='NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM
4MzMwNTk
5MDAyMT
cwMDAwOzIwOTg0N
jUxN
DslMjM7JTIzOyUyMzA7JTIz')",

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNTk5MDAyMTcwMDAwOzIwOTg0NjUxNDslMjM7JTIzOyUyMzA7JTIz')



NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjAyNjM1MjAwMDAwOzIwOTg0ODM2MDslMjM7JTIzOyUyMzA7JTIz')



from this url i want to extract value NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM
4MzMwNTk
5MDAyMT
cwMDAwOzIwOTg0N
jUxN
DslMjM7JTIzOyUyMzA7JTIz





NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjA3
Mzc5OTcwMDAwOzIwOTg1MDc3ODslMjM7JTIzOyUyMzA7JTIz')






{"@odata.context":"https://graph.microsoft.com/v1.0/$metadata#Collection(driveItem)","@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives/b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches/root/delta?NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjA4NTg5MTAwMDAwOzIwOTg1MTM2NzslMjM7JTIzOyUyMzA7JTIz",



{"@odata.context":"https://graph.microsoft.com/v1.0/$metadata#Collection(driveItem)","@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')/root/microsof
t.graph.delta
NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNj
A5MDA1NzMwMDAwOzIwOTg1MTQ5MjslMjM7JTIzOyUyMzA7JTIz

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNj
A4NTg5MTAwMDAwOzIwOTg1MTM2NzslMjM7JTIzOyUyMzA7JTIz






$response = $client->drive($driveId)->delta($tokendelta);
            $data = json_decode($response, true);
 
            $tokendelta = substr($data['@odata.deltaLink'], 144, 184);
            // Save the token to another file
            $tokenFilePath = __DIR__ . '/../storage/deltaToken';
            file_put_contents($tokenFilePath, $tokendelta);

i am picking value using this method but is picking value wrong like this NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjIxNTE2NDAwMDAwOzIwOTg2NTE0MTslMjM7JTIzOyUyMzA7JTIz')





NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjIzMzkzNzAwMDAwOzIwOTg2Njk0NjslMjM7JTIzOyUyMzA7JTIz

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjIzMzE4NDAwMDAwOzIwOTg2NjkxMDslMjM7JTIzOyUyMzA7JTIz



NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjI3MDU1OTAwMDAwOzIwOTg2OTg3NDslMjM7JTIzOyUyMzA7JTIz

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjIzMzE4NDAwMDAwOzIwOTg2NjkxMDslMjM7JTIzOyUyMzA7JTIz







NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjIzMzE4NDAwMDAwOzIwOTg2NjkxMDslMjM7JTIzOyUyMzA7JTIz


NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjIzMzE4NDAwMDAwOzIwOTg2NjkxMDslMjM7JTIzOyUyMzA7JTIz







NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjI4OTEzMzcwMDAwOzIwOTg3MzIwNDslMjM7JTIzOyUyMzA7JTIz


NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjI4OTEzMzcwMDAwOzIwOTg3MzIwNDslMjM7JTIzOyUyMzA7JTIz




NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjI4OTEzMzcwMDAwOzIwOTg3MzIwNDslMjM7JTIzOyUyMzA7JTIz




NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjI4OTEzMzcwMDAwOzIwOTg3MzIwNDslMjM7JTIzOyUyMzA7JTIz






NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjMyOTY5MTAwMDAwOzIwOTg4MDI2OTslMjM7JTIzOyUyMzA7JTIz

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjMzMzk5ODAwMDAwOzIwOTg4MDQ2MDslMjM7JTIzOyUyMzA7JTIz


NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjM0MTY1MzcwMDAwOzIwOTg4MDk5NzslMjM7JTIzOyUyMzA7JTIz





{"@odata.context":"https://graph.microsoft.com/v1.0/$metadata#Collection(driveItem)","@odata.deltaLink":"https://graph.microsoft.com/v1.0/drives('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')/root/microsoft.graph.delta(token='NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjQzNTEwMzAwMDAwOzIwOTg4NDg2OTslMjM7JTIzOyUyMzA7JTIz')","value":[]} 
from this url this function 
$tokendelta = substr($data['@odata.deltaLink'], 144, 171);
            echo $tokendelta;
            // Save the token to another file
            $tokenFilePath = __DIR__ . '/../storage/deltaToken';
            file_put_contents($tokenFilePath, $tokendelta);
is picking the value  NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjQzNTEwMzAwMDAwOzIwOTg4NDg2OTslMjM7JTIzOyUyMzA7JTIz')

i dont want ') in the last 


// $tokendelta = substr($data['@odata.deltaLink'], 124, 151); // Extract from position 3 to 38


NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjQ1MzczNzcwMDAwOzIwOTg4NTM0OTslMjM7JTIzOyUyMzA7JTIz

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjQ1MzczNzcwMDAwOzIwOTg4NTM0OTslMjM7JTIzOyUyMzA7JTIz



01FJOJ76GMX3C6OERAVBEYCL5AFBSRA5EK

01FJOJ76GMX3C6OERAVBEYCL5AFBSRA5EK
NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjQ1MzczNzcwMDAwOzIwOTg4NTM0OTslMjM7JTIzOyUyMzA7JTIz

NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjQ2MDc1MzAwMDAwOzIwOTg4NTYyMzslMjM7JTIzOyUyMzA7JTIz


NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjQ2OTE5MDcwMDAwOzIwOTg4NTkyODslMjM7JTIzOyUyMzA7JTIz



NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMwNjUxMTE1NTAwMDAwOzIwOTg4NzA0OTslMjM7JTIzOyUyMzA7JTIz





NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMxMTkxOTUzMTMwMDAwOzIxMDA4MDQwNzslMjM7JTIzOyUyMzA7JTIz


NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMxMTkyMzc1MDMwMDAwOzIxMDA4MDU5NDslMjM7JTIzOyUyMzA7JTIz




NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMxMTk4MTU2MjAwMDAwOzIxMDA4MzMwNjslMjM7JTIzOyUyMzA7JTIz


NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzMxMTk4MTU2MjAwMDAwOzIxMDA4MzMwNjslMjM7JTIzOyUyMzA7JTIz







//Delete File/Folder on SharePoint Directory By File/Folder Id
    // function deleteItemSharePoint($client, $driveId, $itemId)
    // {
    //     try {
    //         $response = $client->drive($driveId)->deleteItem($itemId);
    //         // If the operation was successful, display a success message
    //         echo "Item Deleted successfully on SharePoint: " . $itemId;
    //         //echo $response;
    //         $messagelog =  "Item Deleted successfully on SharePoint: $itemId\n";
    //         store_log($messagelog);
    //     } catch (Exception $e) {
    //         // If there was an error, display an error message
    //         echo "Error: " . $e->getMessage();
    //     }
    // }







//Upload File/Folder on SharePoint in Specific Folder by File/Folder Name and
    // its Content(if it is a file) and Specific Folder Name 
    //and Download in Local Directory By Id
    function uploadItemtoPathSharePoint($client, $driveId, $itemName,$itemContent, $parentName)
    {
        try {
            $response = $client->drive($driveId)->uploadItemToPath($itemName, $itemContent, $parentName);
            $data = json_decode($response, true);
            
            // If the operation was successful, display a success message
            echo "Item Upload successfully on SharePoint: " . $itemName;
            $messagelog =  "Item Upload successfully on SharePoint: $itemName\n";
            store_log($messagelog);
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
        // getItemById($client, $driveId, $itemid);
        //getItemByPath($client, $driveId, $itemname);
        //downloadItemById($client, $driveId, $itemname, $itemid, $localDirectory);
        //downloadItemByPath($client, $driveId, $itemname);
        //createFolder($client, $driveId, $itemname);
        //createFolder($client, $driveId, $itemName,$localDirectory);
        //moveItem($client, $driveId, $itemid,$parentId);
        //copyItem($client, $driveId, $itemid,$parentId);
    }


01FJOJ76E7PPQCTXQT5BGIDEON6UCTYPMT


// getItemById($client, $driveId, $itemid);
        //getItemByPath($client, $driveId, $itemname);
        //downloadItemById($client, $driveId, $itemname, $itemid, $localDirectory);
        //downloadItemByPath($client, $driveId, $itemname);
        //createFolder($client, $driveId, $itemname);
        //createFolder($client, $driveId, $itemName,$localDirectory);
        //moveItem($client, $driveId, $itemid,$parentId);
        //copyItem($client, $driveId, $itemid,$parentId);


i want to use its value in helper.php file in a function




// Include the config.php file to access the $driveId variable
include('config.php');

// Define your function
function yourFunction() {
    global $driveId; // Access the $driveId variable from config.php
    // Now you can use $driveId in your function
    echo $driveId;
}

// Call your function
yourFunction();

Saloon\Traits\OAuth2\ClientCredentialsGrant::getAccessToken






//if new item has created/uploaded
            //count($data['value'])
            // Check if the 'value' array exists in the JSON data
            // if (isset($data['value']) && is_array($data['value'])) {
            //     // Start iterating from the second element (index 1)
            //     for ($i = 1; $i <= count($data['value']); $i++) {
            //         $item = $data['value'][$i];

            //         // Check if 'id' and 'name' keys exist in the current item
            //         if (isset($item['id']) && isset($item['name'])) {
            //             $itemid = $item['id'];
            //             $itemname = $item['name'];
            //             $createdDateTime = $item['createdDateTime'];
            //             $lastModifiedDateTime = $item['lastModifiedDateTime'];

            //             // Convert the date and time to a string
            //             $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
            //             $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));

            //         //     if ($createdDateTimeString === $lastModifiedDateTimeString) {

            //         //         //$localDirectory = __DIR__ . '/../src/LocalDrive';

            //         //        // downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
            //         //         //delta($client, $driveId);

            //         //     $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            //         //     $mappingDatabase = json_decode($mappingFile, true);
            //         //     $remoteItemId = $itemid;
            //         //     if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //         //         // Start iterating from the second element (index 1)
            //         //         for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
            //         //             $itemDatabase = $mappingDatabase['value'][$j];
            //         //             $remoteItemIdNew = $remoteItemId;
            //         //             //echo $remoteItemIdNew;


            //         //             // Check if 'id' and 'name' keys exist in the current item
            //         //             if (isset($itemDatabase['id']) && $itemDatabase['id'] != $remoteItemIdNew )  {

            //         //                 // if ($createdDateTimeString === $lastModifiedDateTimeString) {

            //         //                      $localDirectory = __DIR__ . '/../src/LocalDrive';

            //         //                      downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
            //         //                 //     //delta($client, $driveId);
            //         //                 // }

            //         //             } else {
            //         //                 //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //         //             }

            //         //         }
            //         //     } else {
            //         //         echo "Error: 'value' array not found in the JSON response.\n";
            //         //     }
            //         // }


            //             if ($createdDateTimeString === $lastModifiedDateTimeString) {

            //                 $localDirectory = __DIR__ . '/../src/LocalDrive';
            //                 downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
            //                 //delta($client, $driveId);
            //             }


            //             // $localDirectory = __DIR__ . '/../src/LocalDrive';
            //             // downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
            //         } else {
            //             echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //         }
            //     }
            // } else {
            //     echo "Error: 'value' array not found in the JSON response.\n";
            // }





//if item has changed
            // if (isset($data['value']) && is_array($data['value'])) {
            //     // Start iterating from the second element (index 1)
            //     for ($i = 1; $i <= count($data['value']); $i++) {
            //         $item = $data['value'][$i];

            //         // Check if 'id' and 'name' keys exist in the current item
            //         if (isset($item['createdDateTime']) && isset($item['lastModifiedDateTime'])) {
            //             $createdDateTime = $item['createdDateTime'];
            //             $lastModifiedDateTime = $item['lastModifiedDateTime'];
            //             $itemid = $item['id'];
            //             $itemNewName = $item['name'];
            //             $itemParentId = $item['parentReference']['id'];



            //             // Convert the date and time to a string
            //             $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
            //             $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));
            //             if ($createdDateTimeString !== $lastModifiedDateTimeString) {

            //                 $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            //                 $mappingDatabase = json_decode($mappingFile, true);
            //                 $remoteItemId = $itemid;
            //                 if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //                     // Start iterating from the second element (index 1)
            //                     for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
            //                         $itemDatabase = $mappingDatabase['value'][$j];
            //                         $remoteItemIdNew = $remoteItemId;
            //                         //echo $remoteItemIdNew;


            //                         // Check if 'id' and 'name' keys exist in the current item
            //                         if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

            //                             $itemOldName = $itemDatabase['name'];
            //                             //echo $itemnameDatabase;

            //                             //$localPath = __DIR__ . '\LocalDrive/'. $itemnameDatabase;
            //                             //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
            //                         } else {
            //                             //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //                         }
            //                     }
            //                 } else {
            //                     echo "Error: 'value' array not found in the JSON response.\n";
            //                 }

            //                 $itemOldNameOld = $itemOldName;
            //                 $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            //                 $mappingDatabase = json_decode($mappingFile, true);
            //                 $remoteItemParentId = $itemParentId;
            //                 if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //                     // Start iterating from the second element (index 1)
            //                     for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
            //                         $itemDatabase = $mappingDatabase['value'][$k];
            //                         $remoteItemParentIdNew = $remoteItemParentId;
            //                         //echo $remoteItemParentIdNew;


            //                         // Check if 'id' and 'name' keys exist in the current item
            //                         if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemParentIdNew) {

            //                             $itemParentnameDatabase = $itemDatabase['name'];
            //                             $itemParentWebUrl = $itemDatabase['webUrl'];
            //                             //echo $itemParentWebUrl;

            //                             // // Find the position of "Library1" in the URL
            //                             $libraryPosition = strpos($itemParentWebUrl, "Library1");

            //                             if ($libraryPosition !== false) {
            //                                 // Extract the value after "Library1" and everything after it
            //                                 $value = substr($itemParentWebUrl, $libraryPosition + strlen("Library1"));
            //                                 echo "Extracted value: " . $value;
            //                             } else {
            //                                 echo "Value not found in the URL.";
            //                             }

            //                             echo "Extracted value: " . $value;

            //                             if ($value === ' ') {
            //                                 $itemOldNameOldOld = $itemOldNameOld;
            //                                 //echo $itemnameDatabaseOriginalNew;
            //                                 $localPath = __DIR__ . '\LocalDrive/' . $itemOldNameOldOld;
            //                                 echo $localPath;
            //                                 updateItemLocally($client, $driveId, $itemid, $itemNewName, $localPath);
            //                                 //delta($client, $driveId);
            //                             } else {


            //                                 $itemOldNameOldOld = $itemOldNameOld;
            //                                 //echo $itemnameDatabaseOriginalNew;
            //                                 $localPath = __DIR__ . '\LocalDrive' . $value . "/" . $itemOldNameOldOld;
            //                                 echo $localPath;
            //                                 updateItemLocally($client, $driveId, $itemid, $itemNewName, $localPath);
            //                                 // delta($client, $driveId);
            //                             }
            //                         } else {
            //                             //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //                         }
            //                     }
            //                 } else {
            //                     echo "Error: 'value' array not found in the JSON response.\n";
            //                 }
            //             }
            //            // delta($client, $driveId);
            //         } else {
            //             echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //         }
            //     }
            // } else {
            //     echo "Error: 'value' array not found in the JSON response.\n";
            // }





//if item has deleted 
            // if (isset($data['value']) && is_array($data['value'])) {
            //     // Start iterating from the second element (index 1)
            //     for ($i = 1; $i <= count($data['value']); $i++) {
            //         $item = $data['value'][$i];

            //         // Check if 'id' and 'name' keys exist in the current item
            //         if (isset($item['deleted']) && $item['deleted']['state'] === 'deleted') {

            //             $itemid = $item['id'];
            //             //$itemname = $item['name'];

            //             $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            //             $mappingDatabase = json_decode($mappingFile, true);
            //             $remoteItemId = $itemid;
            //             if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //                 // Start iterating from the second element (index 1)
            //                 for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
            //                     $itemDatabase = $mappingDatabase['value'][$j];
            //                     $remoteItemIdNew = $remoteItemId;
            //                     //echo $remoteItemIdNew;
            //                     // Check if 'id' and 'name' keys exist in the current item
            //                     if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

            //                         $itemOldNameOld = $itemDatabase['name'];
            //                         $itemWebUrl = $itemDatabase['webUrl'];

            //                         // // Find the position of "Library1" in the URL
            //                         $libraryPosition = strpos($itemWebUrl, "Library1");

            //                         if ($libraryPosition !== false) {
            //                             // Extract the value after "Library1" and everything after it
            //                             $value = substr($itemWebUrl, $libraryPosition + strlen("Library1"));
            //                             echo "Extracted value: " . $value;
            //                         } else {
            //                             echo "Value not found in the URL.";
            //                         }

            //                         //echo "Extracted value: " . $value;

            //                         $localDirectory = __DIR__ . '\LocalDrive' . $value;
            //                         deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemOldNameOld, $localDirectory);
            //                     } else {
            //                         //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //                     }
            //                     //delta($client, $driveId);
            //                 }
            //                 delta($client, $driveId);
            //             } else {
            //                 echo "Error: 'value' array not found in the JSON response.\n";
            //             }
            //         } else {
            //             echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //         }
            //     }
            // } else {
            //     echo "Error: 'value' array not found in the JSON response.\n";
            // }




 //if item has Moved
            //   if (isset($data['value']) && is_array($data['value'])) {
            //     // Start iterating from the second element (index 1)
            //     for ($i = 1; $i <= count($data['value']); $i++) {
            //         $item = $data['value'][$i];

            //         // Check if 'id' and 'name' keys exist in the current item
            //         if (isset($item['id']) && isset($item['name'])) {
            //             //$webUrl = $item['webUrl'];
            //             // $lastModifiedDateTime = $item['lastModifiedDateTime'];
            //              $itemid = $item['id'];
            //              $itemname = $item['name'];
            //              $parentReferencecId = $item['parentReference']['id'];
            //                 //echo $webUrl;
            //                 //echo $itemid;
            //                 //echo $itemname;



            //                 $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            //                 $mappingDatabase = json_decode($mappingFile, true);
            //                 //$remoteItemWebUrl = $webUrl;
            //                 $remoteItemId = $itemid;
            //                 if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //                     // Start iterating from the second element (index 1)
            //                     for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
            //                         $itemDatabase = $mappingDatabase['value'][$j];
            //                         //$remoteItemWebUrlNew = $remoteItemWebUrl;
            //                         $remoteItemIdNew = $remoteItemId;
            //                         //echo $remoteItemIdNew;
            //                         //echo $remoteItemWebUrlNew;

            //                         // Check if 'id' and 'name' keys exist in the current item
            //                         if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

            //                             $itemUrlDatabase = $itemDatabase['webUrl'];

            //                             // // Find the position of "Library1" in the URL
            //                             $libraryPosition = strpos($itemUrlDatabase, "Library1");

            //                             if ($libraryPosition !== false) {
            //                                 // Extract the value after "Library1" and everything after it
            //                                 $valueItem = substr($itemUrlDatabase, $libraryPosition + strlen("Library1"));
            //                                 echo "Extracted value: " . $valueItem;
            //                             } else {
            //                                 echo "Value not found in the URL.";
            //                             }

            //                             //echo $itemNameDatabase;
            //                                 // $file=__DIR__ . '\LocalDrive/' . $itemname;
            //                                 // $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;
            //                                 // echo $file;
            //                                 // echo $to;
            //                                 // move_file($file, $to);

            //                             // if($itemNameDatabase === 'root'){
            //                             //     $file=__DIR__ . '\LocalDrive/' . $itemname;
            //                             //     $to = __DIR__ . '\LocalDrive/';
            //                             //     echo $file;
            //                             //     echo $to;
            //                             //     move_file($file, $to);
            //                             //     //recursive_files_copy($file, $to); 
            //                             // }
            //                             // else{
            //                             //     $file=__DIR__ . '\LocalDrive/' . $itemname;
            //                             //     $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;

            //                             //     echo $file;
            //                             //     echo $to;
            //                             //     //recursive_files_copy($file, $to); 
            //                             //     move_file($file, $to);
            //                             // }
            //                             //$itemnameDatabaseParent = '4000';

            //                         } else {
            //                             //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //                         }
            //                     }
            //                 } else {
            //                     echo "Error: 'value' array not found in the JSON response.\n";
            //                 }

            //                 $valueItemnew=$valueItem;
            //                 $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            //                 $mappingDatabase = json_decode($mappingFile, true);
            //                 //$remoteItemWebUrl = $webUrl;
            //                 $remoteparentReferencecId = $parentReferencecId;
            //                 if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
            //                     // Start iterating from the second element (index 1)
            //                     for ($j = 0; $j <= count($mappingDatabase['value']); $j++) {
            //                         $itemDatabase = $mappingDatabase['value'][$j];
            //                         //$remoteItemWebUrlNew = $remoteItemWebUrl;
            //                         $remoteremoteparentReferencecIdNew = $remoteparentReferencecId;
            //                         //echo $remoteItemIdNew;
            //                         //echo $remoteItemWebUrlNew;

            //                         // Check if 'id' and 'name' keys exist in the current item
            //                         if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteremoteparentReferencecIdNew) {

            //                             $itemUrlDatabaseParent = $itemDatabase['webUrl'];

            //                             // // Find the position of "Library1" in the URL
            //                             $libraryPosition = strpos($itemUrlDatabaseParent, "Library1");

            //                             if ($libraryPosition !== false) {
            //                                 // Extract the value after "Library1" and everything after it
            //                                 $valueParent = substr($itemUrlDatabaseParent, $libraryPosition + strlen("Library1"));
            //                                 echo "Extracted value: " . $valueParent;
            //                             } else {
            //                                 echo "Value not found in the URL.";
            //                             }


            //                                 $file=__DIR__ . '\LocalDrive/' . $valueItem;
            //                                 $to = __DIR__ . '\LocalDrive/'. $valueParent;
            //                                 echo $file;
            //                                 echo $to;
            //                                 move_file_Locally($file, $to);

            //                             // if($itemNameDatabase === 'root'){
            //                             //     $file=__DIR__ . '\LocalDrive/' . $itemname;
            //                             //     $to = __DIR__ . '\LocalDrive/';
            //                             //     echo $file;
            //                             //     echo $to;
            //                             //     move_file($file, $to);
            //                             //     //recursive_files_copy($file, $to); 
            //                             // }
            //                             // else{
            //                             //     $file=__DIR__ . '\LocalDrive/' . $itemname;
            //                             //     $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;

            //                             //     echo $file;
            //                             //     echo $to;
            //                             //     //recursive_files_copy($file, $to); 
            //                             //     move_file($file, $to);
            //                             // }
            //                             //$itemnameDatabaseParent = '4000';

            //                         } else {
            //                             //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //                         }
            //                     }
            //                 } else {
            //                     echo "Error: 'value' array not found in the JSON response.\n";
            //                 }


            //         } else {
            //             echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
            //         }
            //     }
            // } else {
            //     echo "Error: 'value' array not found in the JSON response.\n";
            // }






//Delete File/Folder on SharePoint Directory By File/Folder Name
    function deleteItemSharePoint($client,$driveId, $itemName)
    {
        //$client=Config.
        try {

            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            $mappingDatabase = json_decode($mappingFile, true);

            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                // Start iterating from the second element (index 1)
                for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                    $itemDatabase = $mappingDatabase['value'][$k];
                    $itemNameNew = $itemName;
                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($itemDatabase['name']) && $itemDatabase['name'] === $itemNameNew) {
                        $itemId = $itemDatabase['id'];
                    } else {
                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }
 
            $response = $client->drive($driveId)->deleteItem($itemId);
            //echo $response;
            // If the operation was successful, display a success message
            echo "Item Deleted successfully on SharePoint: " . $itemName;
            
            $messagelog =  "Item Deleted successfully on SharePoint: $itemName\n";
            store_log($messagelog);
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
    }





 //Move File/Folder on SharePoint Directory by File/Folder Id and Parent Id
    //If we want to move in a specific folder then use its id (Parent Id) Otherwise
    //Parent Id is root id
    // function moveItemSharePoint($client, $driveId, $itemId, $parentId)
    // {
    //     try {
    //         $response = $client->drive($driveId)->moveItem($itemId, $parentId);
    //         // If the operation was successful, display a success message
    //         echo "Item Moved successfully on SharePoint: " . $response;
    //         $messagelog =  "Item Moved successfully on SharePoint:  $response\n";
    //         store_log($messagelog);
    //     } catch (Exception $e) {
    //         // If there was an error, display an error message
    //         echo "Error: " . $e->getMessage();
    //     }
    // }




function moveItemSharePoint($client, $driveId, $itemName, $parentName)
    {
        try {
            $itemId='';
            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            $mappingDatabase = json_decode($mappingFile, true);

            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                // Start iterating from the second element (index 1)
                for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                    $itemDatabase = $mappingDatabase['value'][$k];
                    //$itemOldNameNew = $itemOldName;
                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($itemDatabase['name']) && $itemDatabase['name'] === $itemName) {
                        $itemId = $itemDatabase['id'];
                    } else {
                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }


            $parentId='';
            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            $mappingDatabase = json_decode($mappingFile, true);

            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                // Start iterating from the second element (index 1)
                for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                    $itemDatabase = $mappingDatabase['value'][$k];
                    //$itemOldNameNew = $itemOldName;
                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($itemDatabase['name']) && $itemDatabase['name'] === $parentName) {
                        $parentId = $itemDatabase['id'];
                    } else {
                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }

            $response = $client->drive($driveId)->moveItem($itemId, $parentId);
            // If the operation was successful, display a success message
            echo "Item Moved successfully on SharePoint: " . $itemName;
            $messagelog =  "Item Moved successfully on SharePoint:  $response\n";
            store_log($messagelog);
            delta($client,$driveId);
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
    }






 //Copy File/Folder on SharePoint Directory by File/Folder Id and Parent Id
    //If we want to move in a specific folder then use its id (Parent Id) Otherwise
    //Parent Id is root id
    // function copyItemSharePoint($client, $driveId, $itemId, $parentId)
    // {
    //     try {
    //         $response = $client->drive($driveId)->copyItem($itemId, $parentId);
    //         // If the operation was successful, display a success message
    //         echo "Item Copied successfully on SharePoint: " . $response;
    //         $messagelog =  "Item Copied successfully on SharePoint:  $response\n";
    //         store_log($messagelog);
    //     } catch (Exception $e) {
    //         // If there was an error, display an error message
    //         echo "Error: " . $e->getMessage();
    //     }
    // }


    function copyItemSharePoint($client, $driveId, $itemName, $parentName)
    {
        try {

            $itemId='';
            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            $mappingDatabase = json_decode($mappingFile, true);

            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                // Start iterating from the second element (index 1)
                for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                    $itemDatabase = $mappingDatabase['value'][$k];
                    //$itemOldNameNew = $itemOldName;
                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($itemDatabase['name']) && $itemDatabase['name'] === $itemName) {
                        $itemId = $itemDatabase['id'];
                    } else {
                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }


            $parentId='';
            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            $mappingDatabase = json_decode($mappingFile, true);

            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                // Start iterating from the second element (index 1)
                for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                    $itemDatabase = $mappingDatabase['value'][$k];
                    //$itemOldNameNew = $itemOldName;
                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($itemDatabase['name']) && $itemDatabase['name'] === $parentName) {
                        $parentId = $itemDatabase['id'];
                    } else {
                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }


            $response = $client->drive($driveId)->copyItem($itemId, $parentId);
            // If the operation was successful, display a success message
            echo "Item Copied successfully on SharePoint: " . $itemName;
            $messagelog =  "Item Copied successfully on SharePoint:  $response\n";
            store_log($messagelog);
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
    }





// Update(Rename) File/Folder on both SharePoint and Local Directory
    //Rename File/Folder on SharePoint By File/Folder Id and New Name
    //Rename File/Folder on Local Directory By Old Name and New Name
    function updateItemBoth($client, $driveId, $itemId, $itemname, $localPath)
    {
        try {
            //echo $localPath;
            // Update the item on SharePoint
            $response = $client->drive($driveId)->updateItem(
                $itemId,
                [
                    'name' => $itemname
                ]
            );

            // If the operation was successful, display a success message
            echo "Item Updated successfully on SharePoint: " . $response;
            $messagelog =  "Item Updated successfully on SharePoint: $response\n";
            store_log($messagelog);

            // Update the local directory
            if (file_exists($localPath)) {
                $newLocalPath = dirname($localPath) . '/' . $itemname;
                //echo $newLocalPath;
                if (rename($localPath, $newLocalPath)) {
                    echo "Local file/directory updated successfully.";

                    $messagelog =  "Local file/directory updated successfully: $newLocalPath\n";
                    store_log($messagelog);
                } else {
                    echo "Failed to update local file/directory.";
                }
            } else {
                echo "Local file/directory not found.";
            }
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
    }







// //Update(Rename) File/Folder on SharePoint By File/Folder Id and its New Name
    // function updateItemSharePoint($client, $driveId, $itemId, $itemUpdatedName)
    // {
    //     try {
    //         $response = $client->drive($driveId)->updateItem(
    //             $itemId,
    //             [
    //                 'name' => $itemUpdatedName
    //             ]
    //         );
    //         // If the operation was successful, display a success message
    //         echo "Item Updated successfully on SharePoint: " . $itemUpdatedName;
    //         $messagelog =  "Item Updated successfully on SharePoint: $itemUpdatedName\n";
    //         store_log($messagelog);
    //     } catch (Exception $e) {
    //         // If there was an error, display an error message
    //         echo "Error: " . $e->getMessage();
    //     }
    // }

    function updateItemSharePoint($client, $driveId, $itemOldName, $itemUpdatedName)
    {
        try {

            $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
            $mappingDatabase = json_decode($mappingFile, true);

            if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                // Start iterating from the second element (index 1)
                for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                    $itemDatabase = $mappingDatabase['value'][$k];
                    $itemOldNameNew = $itemOldName;
                    // Check if 'id' and 'name' keys exist in the current item
                    if (isset($itemDatabase['name']) && $itemDatabase['name'] === $itemOldNameNew) {
                        $itemIdNew = $itemDatabase['id'];
                    } else {
                        //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    }
                }
            } else {
                echo "Error: 'value' array not found in the JSON response.\n";
            }


            $itemIdNewNew= $itemIdNew;
            $response = $client->drive($driveId)->updateItem(
                $itemIdNewNew,
                [
                    'name' => $itemUpdatedName
                ]
            );
            // If the operation was successful, display a success message
            echo "Item Updated successfully on SharePoint: " . $itemUpdatedName;
            $messagelog =  "Item Updated successfully on SharePoint: $itemUpdatedName\n";
            store_log($messagelog);
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
    }







//Create Folder on both SharePoint directory and Local directory 
    //Create Folder on SharePoint by Folder Name 
    //Create Folder on Local Directory by Folder Name and Path of Local Directory
    function createFolderBoth($client, $driveId, $itemPath, $localDirectory)
    {
        // Create the folder on SharePoint
        $response = $client->drive($driveId)->createFolder($itemPath);

        // Check if the SharePoint folder was created successfully
        if ($response) {
            echo "SharePoint Folder Created Successfully!\n";
            // Create the folder locally
            // $folderName = $response->getFolderName(); // Replace with the actual method or property
            //$localFolder = $localDirectory . '/' . $folderName;

            $data = json_decode($response, true);
            $itemname = $data['name'];


            $localFolder = $localDirectory . '/' . $itemname;

            if (mkdir($localFolder)) {
                echo "Local Folder Created Successfully at $localFolder\n";
            } else {
                echo "Failed to create Local Folder\n";
            }
        } else {
            echo "Failed to create SharePoint Folder\n";
        }
    }






//Create Folder on SharePoint directory By Folder Name
    function createFolderSharePoint($client, $driveId, $itemName)
    {
        // Create the folder on SharePoint
        $response = $client->drive($driveId)->createFolder($itemName);

        // Check if the SharePoint folder was created successfully
        if ($response) {
            echo "Folder Created Successfully on SharePoint! . $itemName\n";
            $messagelog =  "Folder Created Successfully on SharePoint: $response\n";
            store_log($messagelog);
        } else {
            echo "Failed to create SharePoint Folder\n";
        }
    }




//Upload File/Folder on SharePoint to Root by File/Folder Name and
    // its Content(if it is a file) and Root Id (ParentId)
    //and Download in Local Directory By Id
    function uploadItemSharePoint($client, $driveId, $itemName, $parentId)
    {
        try {
            $response = $client->drive($driveId)->uploadItem($itemName, $itemName, $parentId);
            $data = json_decode($response, true);
            $itemid = $data['id'];
            $itemname = $data['name'];
            // If the operation was successful, display a success message
            echo "Item Upload successfully: " . $response;
            $messagelog =  "Item Upload successfully: $response\n";
            store_log($messagelog);
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
        //getItemById($client, $driveId, $itemid);
        //getItemByPath($client, $driveId, $itemname);
        //downloadItemById($client, $driveId, $itemname, $itemid);
        //downloadItemByPath($client, $driveId, $itemname);
        //createFolder($client, $driveId, $itemname);
        //createFolder($client, $driveId, $itemName,$localDirectory);
        //deleteItem($client, $driveId, $itemid);
    }





//Upload File/Folder on SharePoint in Specific Folder by File/Folder Name and
    // its Content(if it is a file) and Specific Folder Name 
    function uploadItemtoPathSharePoint($client, $driveId, $itemName,$itemContent, $parentName)
    {
        try {
            $response = $client->drive($driveId)->uploadItemToPath($itemName, $itemContent, $parentName);
            $data = json_decode($response, true);
            // If the operation was successful, display a success message
            echo "Item Upload successfully on SharePoint: " . $itemName;
            $messagelog =  "Item Upload successfully on SharePoint: $response\n";
            store_log($messagelog);
        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
        
    }





// $source_dir = __DIR__ . '/../src/LocalDrive/f234';    
    // $destination_dir = __DIR__ . '/../src/LocalDrive/4000';
    // recursive_files_copy($source_dir, $destination_dir);


    //Move File/Folder from one directory to another on Local Directory
    //  $file = __DIR__ . '/../src/LocalDrive/f1/f23444';
    //  $to =  __DIR__ . '/../src/LocalDrive/';
    //  move_file_Locally($file, $to);



    //    $logFilePath = 'logs/my_log_file.log';
    //    $logFile = fopen($logFilePath, 'a'); // 'a' mode for appending to the file
    //    $message = "Something happened at " . date('Y-m-d H:i:s') . ": This is a log message.\n";
    //    fwrite($logFile, $message);
    //    fclose($logFile);
    //    $localDirectory = __DIR__ . '/../src/LocalDrive';


    //  $itemname='f789New';
    //  $itemoldname='f789';
    //  $itemId = '01FJOJ76HKTALENHONCZGYD6HGT457JEFT';

    //$localPath = __DIR__ . '\LocalDrive/4000/'.$itemoldname;
    // echo $localPath;

    //updateItem($client, $driveId, $itemId,$itemname, $localPath);
   
    //$itemid = 'Newfolder(3)';
    //$parentId = '01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ';
    //$parentName = 'FileTestTestNew/FolderNameNew';
    //$parentName = 'AppFolder12';
    //$itemName = '200.txt';
    //$itemName = 'NewTest98/NewTest100';
    //$itemContent = 'File Created for testing';
    //$itemname = '4000';
    //$itemPath = '400000000';
    //01FJOJ76EIEB2ZRHWCNBCIFAZHAOSPHPTK
    //$itemname='DemoFileRenameAgain.txt';
    // $itemOldName = 'file_for_log_30';
    // $itemUpdatedName='file_for_log_30.txt';

    //delta($client, $driveId);
    //deltaByToken($client, $driveId, $tokendelta);
    //copyItem($client, $driveId, $itemid, $parentId);
    //moveItem($client, $driveId, $itemid,$parentId);
    //moveItemSharePoint($client, $driveId, $itemName, $parentName);
    //downloadFolderByPath($client, $driveId, $itemname);
    //downloadFolder($client, $driveId, $itemname,$localDirectory);
    //createFolder($client, $driveId, $itemname,$localDirectory);
    //createFolderBoth($client, $driveId, $itemPath, $localDirectory)
    //createFolderLocally($client, $driveId, $itemname,$localDirectory);
    //createFolderSharePoint($client, $driveId, $itemPath, $localDirectory);
    //createFolderSharePoint($client, $driveId, $itemName)
    //downloadItemByPath($client, $driveId, $itemName);
    //uploadItem($client, $driveId, $itemName,$parentId);
    //uploadItemSharePoint($client, $driveId, $itemName, $parentId, $localDirectory);
    //uploadItemtoPath($client, $driveId, $itemName,$parentName,$localDirectory);
    //uploadItemtoPathSharePoint($client, $driveId, $itemName,$itemContent, $parentName);
    //deleteItem($client, $driveId, $itemid,$localDirectory);
    //deleteItemBothByName($client, $driveId,$itemId,$itemName, $localDirectory)
    //deleteItemSharePoint($client, $driveId, $itemName);
    ///listItemById($client, $driveId, $itemId);
    //listItemByPath($client, $driveId, $itemPath);
    //listItems($client, $driveId);
    //updateItem($client, $driveId, $itemId, $itemname,$localDirectory);
    //updateItemSharePoint($client, $driveId, $itemId, $itemname);
    //updateItemSharePoint($client, $driveId, $itemOldName, $itemUpdatedName);
    //getItemById($client, $driveId, $itemId);
    //getItems($client, $driveId);
    //updateItem($client, $driveId, $itemId, $itemname, $localPath);
    //updateItemLocally($client, $driveId, $itemId, $itemname, $localPath);
    //updateItemBoth($client, $driveId, $itemId, $itemname, $localPath)
    //copyItem($client, $driveId, $itemId, $parentId, $localDirectory);
    //deleteItemlocally($client, $driveId, $itemId, $itemName, $localDirectory);
    //deleteItemlocally($client, $driveId, $itemId, $itemName, $localDirectory);




    //Download Item on Local Directory By Name
    //  function downloadItemByPath($client, $driveId, $itemname, $itemId)
    //  {

    //      // Define the local directory where you want to save the item
    //      $localDirectory = __DIR__ . '/../src/LocalDrive';

    //      // Define the local file/folder path
    //      $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;

    //      // Check if the item (file or folder) already exists locally
    //      if (file_exists($localFilePath)) {
    //          echo "Item already exists at: $localFilePath\n";
    //      } else {
    //          // Get information about the item
    //          $itemInfo = $client->drive($driveId)->getItemByPath($itemname);

    //          //if ($itemInfo !== false) {
    //          $data = json_decode($itemInfo, true);
    //          if ($data['folder']) {
    //              // If the item is a folder, create the local folder
    //              if (mkdir($localFilePath, 0777, true)) {
    //                  echo "Folder created successfully at: $localFilePath\n";
    //              } else {
    //                  echo "Failed to create folder at: $localFilePath\n";
    //              }

    //              // Recursively download the contents of the folder
    //              $children = $client->drive($driveId)->listById($itemId);

    //              foreach ($children as $child) {
    //                  downloadItemByPath($client, $driveId, $child['name'], $child['id']);
    //              }
    //          } else {
    //              // If the item is a file, download and save it
    //              $response = $client->drive($driveId)->downloadItemByPath($itemname);
    //              if ($response !== false) {
    //                  if (file_put_contents($localFilePath, $response) !== false) {
    //                      echo "File saved successfully to $localFilePath\n";
    //                  } else {
    //                      echo "Failed to save the file to $localFilePath\n";
    //                  }
    //              } else {
    //                  echo "Failed to download the file.\n";
    //              }
    //          }

    //          //}
    //          //}
    //          // else {
    //          //     echo "Failed to get item information.\n";
    //          // }
    //      }
    //  }









    // function downloadItemById($client, $driveId, $itemname, $itemId)
    // {
    //     // Define the local directory where you want to save the item
    //     $localDirectory = __DIR__ . '/../src/LocalDrive';

    //     // Define the local file/folder path
    //     $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;

    //     // Check if the item (file or folder) already exists locally
    //     if (file_exists($localFilePath)) {
    //         echo "Item already exists at: $localFilePath\n";
    //     } else {
    //         // Download the item from SharePoint
    //         $response = $client->drive($driveId)->downloadItemById($itemId);

    //         if ($response !== false) {
    //             // Save the item to the local directory
    //             if (file_put_contents($localFilePath, $response) !== false) {
    //                 echo "Item saved successfully to $localFilePath\n";
    //             } else {
    //                 echo "Failed to save the item.\n";
    //             }
    //         } else {
    //             echo "Failed to download the item.\n";
    //         }
    //     }
    // }


    //Download Item By Id
    // function downloadItemById($client, $driveId, $itemname, $itemId)
    // {
    //     $response = $client
    //         ->drive($driveId)
    //         ->downloadItemById($itemId);

    //     //Define the local directory where you want to save the Item
    //     $localDirectory = __DIR__ . '/../src/LocalDrive';

    //     $imageContent = $response;
    //     $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . $itemname;
    //     file_put_contents($localFilePath, $imageContent);

    //     if (file_put_contents($localFilePath, $imageContent) !== false) {
    //         echo 'Item saved successfully to ' . $localFilePath;
    //     } else {
    //         echo 'Failed to save the Item.';
    //     }
    // }



    //   $response = $client
    //  ->drive($driveId)
    //  ->request('https://5jd7y6.sharepoint.com/sites/SPFX3/');
    //  echo $response;

    //01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ
    //Get Item By Id
    // $response = $client
    // ->drive($driveId)
    // ->getItemById('DDD8DF03-889A-42C8-912E-AD79065AB488'); 
    // echo $response;


    //// 817FBE15-48E8-42A5-BC3B-67E38EE00C98

    //Get Item By Path
    // $response = $client
    // ->drive($driveId)
    // ->getItemByPath('Folder For Testing'); 
    // echo $response;


    // //Get Items
    // $response = $client
    // ->drive($driveId)
    // ->getItems(); 
    // echo $response;


    //////  $localDirectory = 'C:\xampp\htdocs\sharepoint-sdk-example-main\src\LocalDrive';

    //Download Item By Path
    //  $response = $client
    //  ->drive($driveId)
    //  ->downloadItemByPath('Folder For Testing');   

    // //// Define the local directory where you want to save the image
    //     $localDirectory = __DIR__ . '/../src/LocalDrive';

    //     $imageContent = $response;
    //     $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . 'Folder For Testing';
    //     file_put_contents($localFilePath, $imageContent);

    //     if (file_put_contents($localFilePath, $imageContent) !== false) {
    //                 echo 'Image saved successfully to ' . $localFilePath;
    //              } else {
    //                 echo 'Failed to save the image.';
    //              }

    //06DE7584-6D93-4339-9E34-CED9AE2C9CDB

    //Download Item By Id
    //  $response = $client
    //  ->drive($driveId)
    //  ->downloadItemById('06DE7584-6D93-4339-9E34-CED9AE2C9CDB');   

    // //Define the local directory where you want to save the image
    //     $localDirectory = __DIR__ . '/../src/LocalDrive';

    //     $imageContent = $response;
    //     $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . '06DE7584-6D93-4339-9E34-CED9AE2C9CDB';
    //     file_put_contents($localFilePath, $imageContent);

    //     if (file_put_contents($localFilePath, $imageContent) !== false) {
    //                 echo 'Image saved successfully to ' . $localFilePath;
    //              } else {
    //                 echo 'Failed to save the image.';
    //              }


    //Creating Folder on Drive
    //              $response = $client
    //  ->drive($driveId)
    //  ->createFolder("Testing Folder2");
    //              echo $response;

    //upload item
    //      $response = $client
    //      ->drive($driveId)
    //    ->uploadItem
    //    ("DeletingFile4.txt",
    //    "Testing For Deleting Item2",
    //    "01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ");
    //     echo $response;

    //Upload item to path
    //     $response = $client
    //      ->drive($driveId)
    //    ->uploadItemToPath
    //    ("TestingFileUpload11.txt",
    //    "Testing For Uploading Item 1",
    //    "Testing Folder");
    //     echo $response;

    //Deleting Item (First Upload a item and then use its id for deletion)
    // $response = $client
    // ->drive($driveId)
    // ->deleteItem('01FJOJ76FWPKNLI3WZVFDLZCYQNA4YUCCQ'); 
    // echo $response;


    //  $response = $client
    //     ->drive($driveId)
    //     ->deleteItemByPath('5.txt'); 
    //     echo $response;

    //Move Item (First Upload a item and then use its id and parent id from
    //where you want to move a item)
    // $response = $client
    // ->drive($driveId)
    // ->moveItem('817FBE15-48E8-42A5-BC3B-67E38EE00C98','01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ'); 
    // echo $response;

    //Copy Item (First Upload a item and then use its id and parent id from
    //where you want to copy a item)
    // $response = $client
    // ->drive($driveId)
    // ->copyItem('6F8573F0-0441-445B-BC24-8A20C83445C1','01FJOJ76F6Y2GOVW7725BZO354PWSELRRZ'); 
    // echo $response;

    //List Items By Id
    // $response = $client
    // ->drive($driveId)
    // ->listById('01FJOJ76A2TUDVG2UK2JEY25PEFIDDUQGE'); 
    // echo $response;

    //List Items By Path
    // $response = $client
    // ->drive($driveId)
    // ->listByPath('Testing Folder2'); 
    // echo $response;

    // //List Items
    // $response = $client
    // ->drive($driveId)
    // ->listItems(); 
    // echo $response;

    //Update Item
    // $response = $client
    //     ->drive($driveId)
    //     ->updateItem('817FBE15-48E8-42A5-BC3B-67E38EE00C98', [
    //         'name' => 'new-file-name33.txt'
    //     ]);
    // echo $response;

    //First Time Delta Call
    // $response = $client
    // ->drive($driveId)
    // ->delta(); 
    // echo $response;

    //After Changes(Modification) delta call for track changes
    // $response = $client
    // ->drive($driveId)
    // ->delta('NDslMjM0OyUyMzE7MztkYWQwYzFjYy1kMTFjLTRmOTQtODEwMS0wYmIwMzU3MjE3YWM7NjM4MzE4MzYyOTkzMDMwMDAwOzIwNzQzMDI0NzslMjM7JTIzOyUyMzA7JTIz'); 
    // echo $response;



    // $response = $client
    // ->drive('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')
    // ->getItemByPath('Folder For Testing'); 
    // echo $response;
    //   		// $foldername=$_POST['$response'];
    // if(!is_dir($foldername)) mkdir($foldername);
    // foreach($_FILES['files']['name'] as $i => $name)
    // {
    //     if(strlen($_FILES['files']['name'][$i]) > 1)
    //     {  move_uploaded_file($_FILES['files']['tmp_name'][$i],$foldername."/".$name);
    //     }
    // }
    // echo "Folder is successfully uploaded";




    // $url = "https://5jd7y6.sharepoint.com/sites/SPFX3/Library1/4000/777777.txt";

    // // Define a regular expression pattern to match the value between the last two slashes
    // $pattern = "/\/([^\/]+)\/([^\/]+)\.txt$/";

    // // Use preg_match to find the value
    // if (preg_match($pattern, $url, $matches)) {
    //     $value = $matches[1]; // The value you want (4000) will be in $matches[1]
    //     echo "Extracted value: " . $value;
    // } else {
    //     echo "Value not found in the URL.";
    // }




    //   if(isset($_POST['upload']))
    //   {
    //   	if($_POST['foldername'] != "")
    //   	{
    //   		$foldername=$_POST['foldername'];
    //   		if(!is_dir($foldername)) mkdir($foldername);
    //   		foreach($_FILES['files']['name'] as $i => $name)
    // 		{
    //   		    if(strlen($_FILES['files']['name'][$i]) > 1)
    //   		    {  move_uploaded_file($_FILES['files']['tmp_name'][$i],$foldername."/".$name);
    //   		    }
    //   		}
    //   		echo "Folder is successfully uploaded";
    //   	}
    //   	else
    //   	    echo "Upload folder name is empty";
    //   }







    // var_dump($response->json());


    //$result = $graphServiceClient->drives()->byDriveId('drive-id')->items()->byDriveItemId('driveItem-id')->delta()->get()->wait();





    //01FJOJ76A36PK2DDGVZRBIDX7AIWW3G53A  parent id
    //817FBE15-48E8-42A5-BC3B-67E38EE00C98 item id


    // $flag = @mkdir($save_path . "/src/LocalDrive/" . $response,0777,true);
    // echo $flag ;
    //var_dump($response->json());

    //echo ($response);
    //  header('Content-Type: application/octet-stream');
    //  header('Content-Disposition: attachment; filename="react.png"');
    //  header('Content-Length: ' . strlen($response));
    //echo $response;

    // $response = $client
    //     ->drive('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')
    //     ->getItemById('01FJOJ76HYJQJSVE3L25CYF22TD2SGR7YB');

    // var_dump($response->json());


    // $response = $client
    //     ->drive('b!A1_K8Zkwa0ikSugI16DH_QsyIfJNq29CitDnlep5wSHMwdDaHNGUT4EBC7A1ches')
    //     ->downloadItemByPath('react.png');

    // var_dump($response->json());


    // $sites = $client->sites()->get();

    // // Loop through sites and find the one you want
    // foreach ($sites as $site) {
    //     if ($site['name'] === 'YourSiteName') {
    //         $driveId = $site['drive']['id'];
    //         break;
    //     }
    // }








    // Check if the download was successful
    // if ($response->getStatusCode() == 200) {
    //     // Get the binary content of the image
    //     $imageContent = $response->getBody();

    //     // Create the full path to the local file
    //     $localFilePath = $localDirectory . DIRECTORY_SEPARATOR . 'react.png';

    //     // Save the image content to the local file
    //     if (file_put_contents($localFilePath, $imageContent) !== false) {
    //         echo 'Image saved successfully to ' . $localFilePath;
    //     } else {
    //         echo 'Failed to save the image.';
    //     }
    // } else {
    //     echo 'Failed to download the image from SharePoint.';
    // }






 //First Time Delta Call
    //Give Information of All Files/Folders in JSON
    function delta()
    {
        global $client;
        global $driveId;
        $response = $client->drive($driveId)->delta();

        // Save the new response to the file
        $filePath = __DIR__ . '/../storage/deltaResponse';
        file_put_contents($filePath, $response);

        $data = json_decode($response, true);

        $deltaLink = $data['@odata.deltaLink'];
        $parts = explode("token=", $deltaLink); // Split the URL based on "token="
        if (count($parts) > 1) {
            $tokendelta = $parts[1]; // Get the second part, which is the token value
        } else {
            $tokendelta = ""; // Handle the case where "token=" is not found in the URL
        }
        // Save the token to another file
        $tokenFilePath = __DIR__ . '/../storage/deltaToken';
        file_put_contents($tokenFilePath, $tokendelta);

        // echo $response; // Optional: Display the new response
    }


    //This functions track changes of files/folders created/uploaded on SharePoint
    function function_for_Create_Item($data)
    {
        global $client;
        global $driveId;
        //if new item has created/uploaded
        //count($data['value'])
        // Check if the 'value' array exists in the JSON data
        if (isset($data['value']) && is_array($data['value'])) {
            // Start iterating from the second element (index 1)
            for ($i = 1; $i <= count($data['value']); $i++) {
                $item = $data['value'][$i];

                // Check if 'id' and 'name' keys exist in the current item
                if (isset($item['id']) && isset($item['name'])) {
                    $itemid = $item['id'];
                    $itemname = $item['name'];
                    $createdDateTime = $item['createdDateTime'];
                    $lastModifiedDateTime = $item['lastModifiedDateTime'];

                    // Convert the date and time to a string
                    $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
                    $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));

                    //     if ($createdDateTimeString === $lastModifiedDateTimeString) {

                    //         //$localDirectory = __DIR__ . '/../src/LocalDrive';

                    //        // downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                    //         //delta($client, $driveId);

                    //     $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                    //     $mappingDatabase = json_decode($mappingFile, true);
                    //     $remoteItemId = $itemid;
                    //     if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                    //         // Start iterating from the second element (index 1)
                    //         for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                    //             $itemDatabase = $mappingDatabase['value'][$j];
                    //             $remoteItemIdNew = $remoteItemId;
                    //             //echo $remoteItemIdNew;


                    //             // Check if 'id' and 'name' keys exist in the current item
                    //             if (isset($itemDatabase['id']) && $itemDatabase['id'] != $remoteItemIdNew )  {

                    //                 // if ($createdDateTimeString === $lastModifiedDateTimeString) {

                    //                      $localDirectory = __DIR__ . '/../src/LocalDrive';

                    //                      downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                    //                 //     //delta($client, $driveId);
                    //                 // }

                    //             } else {
                    //                 //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                    //             }

                    //         }
                    //     } else {
                    //         echo "Error: 'value' array not found in the JSON response.\n";
                    //     }
                    // }


                    if ($createdDateTimeString === $lastModifiedDateTimeString) {

                        $localDirectory = __DIR__ . '/../src/LocalDrive';
                        downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                        delta();
                    }


                    // $localDirectory = __DIR__ . '/../src/LocalDrive';
                    // downloadItemByIdLocally($client, $driveId, $itemname, $itemid, $localDirectory);
                } else {
                    echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                }
            }
        } else {
            echo "Error: 'value' array not found in the JSON response.\n";
        }
    }

    //This functions track changes of files/folders Renamed on SharePoint
    function function_for_Rename_Item($data)
    {
        global $client;
        global $driveId;
        if (isset($data['value']) && is_array($data['value'])) {
            // Start iterating from the second element (index 1)
            for ($i = 1; $i <= count($data['value']); $i++) {
                $item = $data['value'][$i];

                // Check if 'id' and 'name' keys exist in the current item
                if (isset($item['createdDateTime']) && isset($item['lastModifiedDateTime'])) {
                    $createdDateTime = $item['createdDateTime'];
                    $lastModifiedDateTime = $item['lastModifiedDateTime'];
                    $itemid = $item['id'];
                    $itemNewName = $item['name'];
                    $itemParentId = $item['parentReference']['id'];



                    // Convert the date and time to a string
                    $createdDateTimeString = date('Y-m-d H:i:s', strtotime($createdDateTime));
                    $lastModifiedDateTimeString = date('Y-m-d H:i:s', strtotime($lastModifiedDateTime));
                    if ($createdDateTimeString !== $lastModifiedDateTimeString) {

                        $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                        $mappingDatabase = json_decode($mappingFile, true);
                        $remoteItemId = $itemid;
                        if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                            // Start iterating from the second element (index 1)
                            for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                                $itemDatabase = $mappingDatabase['value'][$j];
                                $remoteItemIdNew = $remoteItemId;
                                //echo $remoteItemIdNew;


                                // Check if 'id' and 'name' keys exist in the current item
                                if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                    $itemOldName = $itemDatabase['name'];
                                    //echo $itemnameDatabase;

                                    //$localPath = __DIR__ . '\LocalDrive/'. $itemnameDatabase;
                                    //updateItemLocally($client, $driveId, $itemid, $itemname, $localPath);
                                } else {
                                    //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                }
                            }
                        } else {
                            echo "Error: 'value' array not found in the JSON response.\n";
                        }

                        $itemOldNameOld = $itemOldName;
                        $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                        $mappingDatabase = json_decode($mappingFile, true);
                        $remoteItemParentId = $itemParentId;
                        if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                            // Start iterating from the second element (index 1)
                            for ($k = 0; $k <= count($mappingDatabase['value']); $k++) {
                                $itemDatabase = $mappingDatabase['value'][$k];
                                $remoteItemParentIdNew = $remoteItemParentId;
                                //echo $remoteItemParentIdNew;


                                // Check if 'id' and 'name' keys exist in the current item
                                if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemParentIdNew) {

                                    $itemParentnameDatabase = $itemDatabase['name'];
                                    $itemParentWebUrl = $itemDatabase['webUrl'];
                                    //echo $itemParentWebUrl;

                                    // // Find the position of "Library1" in the URL
                                    $libraryPosition = strpos($itemParentWebUrl, "Library1");

                                    if ($libraryPosition !== false) {
                                        // Extract the value after "Library1" and everything after it
                                        $value = substr($itemParentWebUrl, $libraryPosition + strlen("Library1"));
                                        echo "Extracted value: " . $value;
                                    } else {
                                        echo "Value not found in the URL.";
                                    }

                                    echo "Extracted value: " . $value;

                                    if ($value === ' ') {
                                        $itemOldNameOldOld = $itemOldNameOld;
                                        //echo $itemnameDatabaseOriginalNew;
                                        $localPath = __DIR__ . '\LocalDrive/' . $itemOldNameOldOld;
                                        echo $localPath;
                                        updateItemLocally($client, $driveId, $itemid, $itemNewName, $localPath);
                                        delta();
                                    } else {


                                        $itemOldNameOldOld = $itemOldNameOld;
                                        //echo $itemnameDatabaseOriginalNew;
                                        $localPath = __DIR__ . '\LocalDrive' . $value . "/" . $itemOldNameOldOld;
                                        echo $localPath;
                                        updateItemLocally($client, $driveId, $itemid, $itemNewName, $localPath);
                                        delta();
                                    }
                                } else {
                                    //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                                }
                            }
                        } else {
                            echo "Error: 'value' array not found in the JSON response.\n";
                        }
                    }
                    // delta($client, $driveId);
                } else {
                    echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                }
            }
        } else {
            echo "Error: 'value' array not found in the JSON response.\n";
        }
    }

    //This functions track changes of files/folders deleted on SharePoint
    function function_for_delete_Item($data)
    {
        global $client;
        global $driveId;
        if (isset($data['value']) && is_array($data['value'])) {
            // Start iterating from the second element (index 1)
            for ($i = 1; $i <= count($data['value']); $i++) {
                $item = $data['value'][$i];

                // Check if 'id' and 'name' keys exist in the current item
                if (isset($item['deleted']) && $item['deleted']['state'] === 'deleted') {

                    $itemid = $item['id'];
                    //$itemname = $item['name'];

                    $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                    $mappingDatabase = json_decode($mappingFile, true);
                    $remoteItemId = $itemid;
                    if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                        // Start iterating from the second element (index 1)
                        for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                            $itemDatabase = $mappingDatabase['value'][$j];
                            $remoteItemIdNew = $remoteItemId;
                            //echo $remoteItemIdNew;
                            // Check if 'id' and 'name' keys exist in the current item
                            if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                $itemOldNameOld = $itemDatabase['name'];
                                $itemWebUrl = $itemDatabase['webUrl'];

                                // // Find the position of "Library1" in the URL
                                $libraryPosition = strpos($itemWebUrl, "Library1");

                                if ($libraryPosition !== false) {
                                    // Extract the value after "Library1" and everything after it
                                    $value = substr($itemWebUrl, $libraryPosition + strlen("Library1"));
                                    echo "Extracted value: " . $value;
                                } else {
                                    echo "Value not found in the URL.";
                                }

                                //echo "Extracted value: " . $value;

                                $localDirectory = __DIR__ . '\LocalDrive' . $value;
                                deleteItemlocally($client, $driveId, $remoteItemIdNew, $itemOldNameOld, $localDirectory);
                                delta();
                            } else {
                                //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                            }
                            //delta($client, $driveId);
                        }
                       
                    } else {
                        echo "Error: 'value' array not found in the JSON response.\n";
                    }
                } else {
                    echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                }
            }
        } else {
            echo "Error: 'value' array not found in the JSON response.\n";
        }
    }

    //This functions track changes of files/folders moved on SharePoint
    function function_for_moving_Item($data)
    {
        global $client;
        global $driveId;

        if (isset($data['value']) && is_array($data['value'])) {
            // Start iterating from the second element (index 1)
            for ($i = 1; $i <= count($data['value']); $i++) {
                $item = $data['value'][$i];

                // Check if 'id' and 'name' keys exist in the current item
                if (isset($item['id']) && isset($item['name'])) {
                    //$webUrl = $item['webUrl'];
                    // $lastModifiedDateTime = $item['lastModifiedDateTime'];
                    $itemid = $item['id'];
                    $itemname = $item['name'];
                    $parentReferencecId = $item['parentReference']['id'];
                    //echo $webUrl;
                    //echo $itemid;
                    //echo $itemname;



                    $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                    $mappingDatabase = json_decode($mappingFile, true);
                    //$remoteItemWebUrl = $webUrl;
                    $remoteItemId = $itemid;
                    if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                        // Start iterating from the second element (index 1)
                        for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                            $itemDatabase = $mappingDatabase['value'][$j];
                            //$remoteItemWebUrlNew = $remoteItemWebUrl;
                            $remoteItemIdNew = $remoteItemId;
                            //echo $remoteItemIdNew;
                            //echo $remoteItemWebUrlNew;

                            // Check if 'id' and 'name' keys exist in the current item
                            if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                $itemUrlDatabase = $itemDatabase['webUrl'];

                                // // Find the position of "Library1" in the URL
                                $libraryPosition = strpos($itemUrlDatabase, "Library1");

                                if ($libraryPosition !== false) {
                                    // Extract the value after "Library1" and everything after it
                                    $valueItem = substr($itemUrlDatabase, $libraryPosition + strlen("Library1"));
                                    echo "Extracted value: " . $valueItem;
                                } else {
                                    echo "Value not found in the URL.";
                                }

                                //echo $itemNameDatabase;
                                // $file=__DIR__ . '\LocalDrive/' . $itemname;
                                // $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;
                                // echo $file;
                                // echo $to;
                                // move_file($file, $to);

                                // if($itemNameDatabase === 'root'){
                                //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                //     $to = __DIR__ . '\LocalDrive/';
                                //     echo $file;
                                //     echo $to;
                                //     move_file($file, $to);
                                //     //recursive_files_copy($file, $to); 
                                // }
                                // else{
                                //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                //     $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;

                                //     echo $file;
                                //     echo $to;
                                //     //recursive_files_copy($file, $to); 
                                //     move_file($file, $to);
                                // }
                                //$itemnameDatabaseParent = '4000';

                            } else {
                                //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                            }
                        }
                    } else {
                        echo "Error: 'value' array not found in the JSON response.\n";
                    }

                    $valueItemnew = $valueItem;
                    $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                    $mappingDatabase = json_decode($mappingFile, true);
                    //$remoteItemWebUrl = $webUrl;
                    $remoteparentReferencecId = $parentReferencecId;
                    if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                        // Start iterating from the second element (index 1)
                        for ($j = 0; $j <= count($mappingDatabase['value']); $j++) {
                            $itemDatabase = $mappingDatabase['value'][$j];
                            //$remoteItemWebUrlNew = $remoteItemWebUrl;
                            $remoteremoteparentReferencecIdNew = $remoteparentReferencecId;
                            //echo $remoteItemIdNew;
                            //echo $remoteItemWebUrlNew;

                            // Check if 'id' and 'name' keys exist in the current item
                            if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteremoteparentReferencecIdNew) {

                                $itemUrlDatabaseParent = $itemDatabase['webUrl'];

                                // // Find the position of "Library1" in the URL
                                $libraryPosition = strpos($itemUrlDatabaseParent, "Library1");

                                if ($libraryPosition !== false) {
                                    // Extract the value after "Library1" and everything after it
                                    $valueParent = substr($itemUrlDatabaseParent, $libraryPosition + strlen("Library1"));
                                    echo "Extracted value: " . $valueParent;
                                } else {
                                    echo "Value not found in the URL.";
                                }


                                $file = __DIR__ . '\LocalDrive/' . $valueItemnew;
                                $to = __DIR__ . '\LocalDrive/' . $valueParent;
                                echo $file;
                                echo $to;
                                move_file_Locally($file, $to);
                                delta();

                                // if($itemNameDatabase === 'root'){
                                //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                //     $to = __DIR__ . '\LocalDrive/';
                                //     echo $file;
                                //     echo $to;
                                //     move_file($file, $to);
                                //     //recursive_files_copy($file, $to); 
                                // }
                                // else{
                                //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                //     $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;

                                //     echo $file;
                                //     echo $to;
                                //     //recursive_files_copy($file, $to); 
                                //     move_file($file, $to);
                                // }
                                //$itemnameDatabaseParent = '4000';

                            } else {
                                //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                            }
                        }
                    } else {
                        echo "Error: 'value' array not found in the JSON response.\n";
                    }
                } else {
                    echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                }
            }
        } else {
            echo "Error: 'value' array not found in the JSON response.\n";
        }
    }


    //This functions track changes of files/folders copy on SharePoint
    function function_for_copy_Item($data)
    {
        global $client;
        global $driveId;
        if (isset($data['value']) && is_array($data['value'])) {
            // Start iterating from the second element (index 1)
            for ($i = 1; $i <= count($data['value']); $i++) {
                $item = $data['value'][$i];

                // Check if 'id' and 'name' keys exist in the current item
                if (isset($item['id']) && isset($item['name'])) {
                    //$webUrl = $item['webUrl'];
                    // $lastModifiedDateTime = $item['lastModifiedDateTime'];
                    $itemid = $item['id'];
                    $itemname = $item['name'];
                    $parentReferencecId = $item['parentReference']['id'];
                    //echo $webUrl;
                    //echo $itemid;
                    //echo $itemname;



                    $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                    $mappingDatabase = json_decode($mappingFile, true);
                    //$remoteItemWebUrl = $webUrl;
                    $remoteItemId = $itemid;
                    if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                        // Start iterating from the second element (index 1)
                        for ($j = 1; $j <= count($mappingDatabase['value']); $j++) {
                            $itemDatabase = $mappingDatabase['value'][$j];
                            //$remoteItemWebUrlNew = $remoteItemWebUrl;
                            $remoteItemIdNew = $remoteItemId;
                            //echo $remoteItemIdNew;
                            //echo $remoteItemWebUrlNew;

                            // Check if 'id' and 'name' keys exist in the current item
                            if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteItemIdNew) {

                                $itemUrlDatabase = $itemDatabase['webUrl'];

                                // // Find the position of "Library1" in the URL
                                $libraryPosition = strpos($itemUrlDatabase, "Library1");

                                if ($libraryPosition !== false) {
                                    // Extract the value after "Library1" and everything after it
                                    $valueItem = substr($itemUrlDatabase, $libraryPosition + strlen("Library1"));
                                    echo "Extracted value: " . $valueItem;
                                } else {
                                    echo "Value not found in the URL.";
                                }

                                //echo $itemNameDatabase;
                                // $file=__DIR__ . '\LocalDrive/' . $itemname;
                                // $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;
                                // echo $file;
                                // echo $to;
                                // move_file($file, $to);

                                // if($itemNameDatabase === 'root'){
                                //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                //     $to = __DIR__ . '\LocalDrive/';
                                //     echo $file;
                                //     echo $to;
                                //     move_file($file, $to);
                                //     //recursive_files_copy($file, $to); 
                                // }
                                // else{
                                //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                //     $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;

                                //     echo $file;
                                //     echo $to;
                                //     //recursive_files_copy($file, $to); 
                                //     move_file($file, $to);
                                // }
                                //$itemnameDatabaseParent = '4000';

                            } else {
                                //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                            }
                        }
                    } else {
                        echo "Error: 'value' array not found in the JSON response.\n";
                    }

                    $valueItemnew = $valueItem;
                    $mappingFile = @file_get_contents(__DIR__ . '/../storage/deltaResponse') ?: null;
                    $mappingDatabase = json_decode($mappingFile, true);
                    //$remoteItemWebUrl = $webUrl;
                    $remoteparentReferencecId = $parentReferencecId;
                    if (isset($mappingDatabase['value']) && is_array($mappingDatabase['value'])) {
                        // Start iterating from the second element (index 1)
                        for ($j = 0; $j <= count($mappingDatabase['value']); $j++) {
                            $itemDatabase = $mappingDatabase['value'][$j];
                            //$remoteItemWebUrlNew = $remoteItemWebUrl;
                            $remoteremoteparentReferencecIdNew = $remoteparentReferencecId;
                            //echo $remoteItemIdNew;
                            //echo $remoteItemWebUrlNew;

                            // Check if 'id' and 'name' keys exist in the current item
                            if (isset($itemDatabase['id']) && $itemDatabase['id'] === $remoteremoteparentReferencecIdNew) {

                                $itemUrlDatabaseParent = $itemDatabase['webUrl'];

                                // // Find the position of "Library1" in the URL
                                $libraryPosition = strpos($itemUrlDatabaseParent, "Library1");

                                if ($libraryPosition !== false) {
                                    // Extract the value after "Library1" and everything after it
                                    $valueParent = substr($itemUrlDatabaseParent, $libraryPosition + strlen("Library1"));
                                    echo "Extracted value: " . $valueParent;
                                } else {
                                    echo "Value not found in the URL.";
                                }


                                $source_dir = __DIR__ . '\LocalDrive/' . $valueItemnew;
                                $destination_dir = __DIR__ . '\LocalDrive/' . $valueParent;
                                
                                copyFilesLocally($source_dir, $destination_dir);
                                delta();
                                // if($itemNameDatabase === 'root'){
                                //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                //     $to = __DIR__ . '\LocalDrive/';
                                //     echo $file;
                                //     echo $to;
                                //     move_file($file, $to);
                                //     //recursive_files_copy($file, $to); 
                                // }
                                // else{
                                //     $file=__DIR__ . '\LocalDrive/' . $itemname;
                                //     $to = __DIR__ . '\LocalDrive/'. $itemNameDatabase;

                                //     echo $file;
                                //     echo $to;
                                //     //recursive_files_copy($file, $to); 
                                //     move_file($file, $to);
                                // }
                                //$itemnameDatabaseParent = '4000';

                            } else {
                                //echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                            }
                        }
                    } else {
                        echo "Error: 'value' array not found in the JSON response.\n";
                    }
                } else {
                    echo "Error: 'id' and/or 'name' not found in the item JSON.\n";
                }
            }
        } else {
            echo "Error: 'value' array not found in the JSON response.\n";
        }
    }


    //Delta By Token
    //Track Changes of Files/Folders on SharePoint
    function deltaByToken($tokendelta)
    {

        global $client;
        global $driveId;
        try {
            $response = $client->drive($driveId)->delta($tokendelta);
            $data = json_decode($response, true);
            $deltaLink = $data['@odata.deltaLink'];
            $startIndex = strpos($deltaLink, "token='") + 7; // starting position of the token
            $endIndex = strpos($deltaLink, "')", $startIndex); // ending position of the token
            $tokendelta = substr($deltaLink, $startIndex, $endIndex - $startIndex);
            // Save the token to another file
            $tokenFilePath = __DIR__ . '/../storage/deltaToken';
            file_put_contents($tokenFilePath, $tokendelta);

            //if item has created/uploaded
            function_for_Create_Item($data);

            //if item has renamed
            function_for_Rename_Item($data);

            
            //if item has deleted
            function_for_delete_Item($data);

            //if item has moved
            function_for_moving_Item($data);

            //if item has copy
            //function_for_copy_Item($client, $driveId, $data);

        } catch (Exception $e) {
            // If there was an error, display an error message
            echo "Error: " . $e->getMessage();
        }
    }





global $client;
global $driveId;






//Delete File/Folder from both SharePoint Directory and Local Directory by File/Folder Path(Name)
    //Delete File/Folder on SharePoint By File/Folder Name
    //Delete File/Folder on Local Directory File/Folder Name and Path (where file is located)

    // function deleteItemBothByName($client, $driveId, $itemId,$itemName, $localDirectory)
    // {
    //     // Delete the item on SharePoint
    //     $response = $client->drive($driveId)->deleteItemByPath($itemName);

    //     // Check if the SharePoint item was deleted successfully
    //     if ($response) {
    //         echo "SharePoint Item Deleted Successfully!\n";

    //         // Construct the local item path based on the item's name
    //         //$itemName = basename($itemId);
    //         $localItemPath = $localDirectory . '/' . $itemName;

    //         // Check if the local item exists and delete it
    //         if (file_exists($localItemPath)) {
    //             if (is_dir($localItemPath)) {
    //                 // Delete the directory and its contents recursively
    //                 $success = deleteDirectory($localItemPath);
    //                 if ($success) {
    //                     echo "Local Directory Deleted Successfully at $localItemPath\n";
    //                 } else {
    //                     echo "Failed to delete Local Directory at $localItemPath\n";
    //                 }
    //             } else {
    //                 // Delete a file
    //                 if (unlink($localItemPath)) {
    //                     echo "Local File Deleted Successfully at $localItemPath\n";
    //                 } else {
    //                     echo "Failed to delete Local File at $localItemPath\n";
    //                 }
    //             }
    //         } else {
    //             echo "Local Item does not exist at $localItemPath\n";
    //         }
    //     } else {
    //         echo "Failed to delete SharePoint Item\n";
    //     }
    // }

    // Recursive function to delete a directory and its contents on Local Directory

    // function deleteDirectory($dir)
    // {
    //     if (!file_exists($dir)) {
    //         return true;
    //     }

    //     if (!is_dir($dir)) {
    //         return unlink($dir);
    //     }

    //     foreach (scandir($dir) as $item) {
    //         if ($item == '.' || $item == '..') {
    //             continue;
    //         }

    //         if (!deleteDirectory($dir . DIRECTORY_SEPARATOR . $item)) {
    //             return false;
    //         }
    //     }

    //     return rmdir($dir);
    // }


    //Delete File/Folder from both SharePoint Directory and Local Directory By File/Folder Id
    //Delete File/Folder on SharePoint By File/Folder Id
    //Delete File/Folder on Local Directory File/Folder Name and Path (where file is located)

    // function deleteItemBoth($client, $driveId, $itemId, $itemName, $localDirectory)
    // {
    //     // Delete the item on SharePoint
    //     $response = $client->drive($driveId)->deleteItem($itemId);
    //     echo $response;
    //     // Check if the SharePoint item was deleted successfully
    //     if ($response) {
    //         echo "SharePoint Item Deleted Successfully!\n";

    //         // Construct the local item path based on the item's name
    //         ///$itemName = basename($itemId);
    //         $localItemPath = $localDirectory . '/' . $itemName;

    //         // Check if the local item exists and delete it
    //         if (file_exists($localItemPath)) {
    //             if (unlink($localItemPath)) {
    //                 echo "Local Item Deleted Successfully at $localItemPath\n";
    //             } else {
    //                 echo "Failed to delete Local Item\n";
    //             }
    //         } else {
    //             echo "Local Item does not exist at $localItemPath\n";
    //         }
    //     } else {
    //         echo "Failed to delete SharePoint Item\n";
    //     }
    // }





///$itemName = basename($itemId);
        //$localItemPath = $localDirectory . '/' . $itemName;





//   $itemName='vvvvvvvvRa';
//   ClsHelper::deleteItemSharePoint($itemName);

//  $itemOldName='vvvvvvvvR';
//  $itemUpdatedName='vvvvvvvvRa';
//  ClsHelper::updateItemSharePoint($itemOldName, $itemUpdatedName);





// function get_token(): false|string|null
// {
//     return @file_get_contents(__DIR__ . '/../storage/token') ?: null;
// }
// function store_token(string $token): void
// {
//     file_put_contents(__DIR__ . '/../storage/token', $token);
// }

// $token = get_token();

// if ($token === null) {
//     $token = $client->getAccessToken()->serialize();
//     store_token($token);
// }




*Index.php* => This file track changes of SharePoint Directory and made that changes to Local Directory
*helper.php* => This file track changes of Local Directory and made that changes to SharePoint Directory
*config.php* => In this file, Set Configurations for Your SharePoint Directory





